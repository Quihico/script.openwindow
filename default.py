import base64;exec base64.b64decode('#
#       Copyright (C) 2015
#       Json Edits and Various tweaks by OpenELEQ (OpenELEQ@gmail.com)
#       Based on original work by:
#       Lee Randall (info@totalrevolution.tv)
#
#  This software is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License
#  You can find a copy of the license in the add-on folder
if 64 - 64: i11iIiiIii
import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon , os , sys , time , xbmcvfs , datetime , zipfile , shutil , binascii , hashlib
import downloader
import extract
import yt
import threading
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
try :
 import json as simplejson
except :
 import simplejson
 if 73 - 73: II111iiii
IiII1IiiIiI1 = 'script.openwindow'
iIiiiI1IiI1I1 = xbmcaddon . Addon ( IiII1IiiIiI1 )
o0OoOoOO00 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , '' ) )
I11i = xbmcaddon . Addon ( 'script.openwindow' ) . getAddonInfo ( "path" )
O0O = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'language' ) )
Oo = 7
I1ii11iIi11i = 10
I1IiI = 7
o0OOO = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , 'default.py' ) )
iIiiiI = xbmcgui . Dialog ( )
Iii1ii1II11i = xbmcgui . DialogProgress ( )
iI111iI = xbmc . getSkinDir ( )
IiII = 0.0
iI1Ii11111iIi = 0.0
i1i1II = '/storage/.restore/'
O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
I1i1iiI1 = xbmc . translatePath ( os . path . join ( 'special://home' , 'userdata' , 'Thumbnails' ) )
iiIIIII1i1iI = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , 'packages' , '' ) )
o0oO0 = xbmc . translatePath ( 'special://home/' )
oo00 = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'restoregui' )
o00 = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'runwizard' )
Oo0oO0ooo = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'dltime' )
o0oOoO00o = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' )
i1 = xbmc . translatePath ( 'special://xbmc/' )
oOOoo00O0O = xbmc . translatePath ( 'special://home/media/branding/branding_update.png' )
i1111 = xbmc . getIPAddress ( )
i11 = xbmc . translatePath ( 'special://logpath/' )
I11 = xbmc . translatePath ( os . path . join ( o0oO0 , 'debug.txt' ) )
Oo0o0000o0o0 = xbmc . translatePath ( 'special://home/addons/script.openwindow/' )
oOo0oooo00o = xbmc . getInfoLabel ( "System.BuildVersion" )
oO0o0o0ooO0oO = ''
oo0o0O00 = ''
if 68 - 68: o00oo . iI1 + OoOooOOOO
if not os . path . exists ( Oo0o0000o0o0 ) :
 Oo0o0000o0o0 = xbmc . translatePath ( 'special://xbmc/addons/script.openwindow/' )
 if 45 - 45: OoOO + I1iiiiI1iII
def IiIi11i ( ) :
 oOo0oooo00o = xbmc . getInfoLabel ( "System.BuildVersion" )
 iIii1I111I11I = float ( oOo0oooo00o [ : 4 ] )
 if iIii1I111I11I < 14 :
  OO00OooO0OO = os . path . join ( i11 , 'xbmc.log' )
 else :
  OO00OooO0OO = os . path . join ( i11 , 'kodi.log' )
  if 28 - 28: iIii1
 try :
  oOOoO0 = open ( OO00OooO0OO , mode = 'r' )
  O0OoO000O0OO = oOOoO0 . read ( )
  oOOoO0 . close ( )
 except :
  try :
   oOOoO0 = open ( os . path . join ( o0oO0 , 'temp' , 'kodi.log' ) , mode = 'r' )
   O0OoO000O0OO = oOOoO0 . read ( )
   oOOoO0 . close ( )
  except :
   try :
    oOOoO0 = open ( os . path . join ( o0oO0 , 'temp' , 'xbmc.log' ) , mode = 'r' )
    O0OoO000O0OO = oOOoO0 . read ( )
    oOOoO0 . close ( )
   except :
    pass
    if 23 - 23: iIiIiIiIIi + ooOoo0O
 if 'OpenELEC' in O0OoO000O0OO :
  return True
  if 76 - 76: i1II1I11 / i1I / OO0o / oo % O0o0Oo
if IiIi11i ( ) :
 Oo00OOOOO = '/storage'
 O0OO00o0OO = '/storage/downloads'
 if not os . path . exists ( i1i1II ) :
  os . makedirs ( i1i1II )
else :
 Oo00OOOOO = o0oO0
 O0OO00o0OO = xbmc . translatePath ( os . path . join ( 'special://home' , '..' , 'temp_download' ) )
 if 44 - 44: O0o / iIiIiIiIIi + i11iIiiIii + OoooooooOO * i1IIi
o0oo0o0O00OO = os . path . join ( O0OO00o0OO , 'target.zip' )
if not os . path . exists ( O0OO00o0OO ) :
 os . makedirs ( O0OO00o0OO )
 if 80 - 80: i1IIi
 if 70 - 70: OoOO - I1iiiiI1iII
if not os . path . exists ( iiIIIII1i1iI ) :
 os . makedirs ( iiIIIII1i1iI )
 if 43 - 43: i1II1I11 / II111iiii / OoooooooOO . I1iiiiI1iII . i1I
 if 19 - 19: i1II1I11 + O0o
def ooo ( cmd ) :
 ii1I1i1I ( cmd )
 xbmc . executebuiltin ( cmd )
 if 88 - 88: OoOooOOOO + O0 / OoOO * OO0o
 if 41 - 41: iIiIiIiIIi
def ii1I1i1I ( text ) :
 try :
  ii1i1I1i = '%s : %s' % ( IiII1IiiIiI1 , str ( text ) )
  xbmc . log ( ii1i1I1i , xbmc . LOGDEBUG )
 except :
  pass
  if 53 - 53: oo + o00oo * iIiIiIiIIi
  if 61 - 61: i1IIi * ooOoo0O / OoooooooOO . i11iIiiIii . OoOO
def o00O ( what , filelocation ) :
 OOO0OOO00oo = open ( filelocation , "w" )
 OOO0OOO00oo . write ( what )
 OOO0OOO00oo . close ( )
 if 31 - 31: II111iiii - ooOoo0O . O0o0Oo % OoOO - O0
 if 4 - 4: II111iiii / O0o . OO0o
def O0oo0OO0oOOOo ( setting , value ) :
 setting = '"%s"' % setting
 if 35 - 35: oo % o00oo
 if isinstance ( value , list ) :
  o0OOoo0OO0OOO = ''
  for iI1iI1I1i1I in value :
   o0OOoo0OO0OOO += '"%s",' % str ( iI1iI1I1i1I )
   if 24 - 24: iIii1
  o0OOoo0OO0OOO = o0OOoo0OO0OOO [ : - 1 ]
  o0OOoo0OO0OOO = '[%s]' % o0OOoo0OO0OOO
  value = o0OOoo0OO0OOO
  if 56 - 56: O0o
 elif not isinstance ( value , int ) :
  value = '"%s"' % value
  if 92 - 92: OO0o . i1II1I11 + I1iiiiI1iII
 IiII1I11i1I1I = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":%s,"value":%s}, "id":1}' % ( setting , value )
 ii1I1i1I ( IiII1I11i1I1I )
 oO0Oo = xbmc . executeJSONRPC ( IiII1I11i1I1I )
 ii1I1i1I ( oO0Oo )
 if 54 - 54: I1iiiiI1iII - o00oo + OoooooooOO
 if 70 - 70: i1I / i1II1I11 . OO0o % iI1
def OOoOO00OOO0OO ( setting ) :
 try :
  setting = '"%s"' % setting
  if 16 - 16: o00oo * iIiIiIiIIi % oo
  IiII1I11i1I1I = '{"jsonrpc":"2.0", "method":"Settings.GetSettingValue","params":{"setting":%s}, "id":1}' % ( setting )
  ii1I1i1I ( IiII1I11i1I1I )
  oO0Oo = xbmc . executeJSONRPC ( IiII1I11i1I1I )
  ii1I1i1I ( oO0Oo )
  if 86 - 86: o00oo + i1I % i11iIiiIii * iIiIiIiIIi . O0o * i1II1I11
  oO0Oo = simplejson . loads ( oO0Oo )
  if 44 - 44: iIiIiIiIIi
  if oO0Oo . has_key ( 'result' ) :
   if oO0Oo [ 'result' ] . has_key ( 'value' ) :
    return oO0Oo [ 'result' ] [ 'value' ]
 except :
  pass
  if 88 - 88: O0o0Oo % i1I . II111iiii
 return None
 if 38 - 38: I1iiiiI1iII
 if 57 - 57: O0 / iIiIiIiIIi * O0o0Oo / OoOO . II111iiii
def i11iIIIIIi1 ( language ) :
 file = xbmc . translatePath ( os . path . join ( O0O , language , 'langinfo.xml' ) )
 if 20 - 20: i1IIi + iIii1 - O0o
 try :
  IiI11iII1 = open ( file , 'r' )
  o0OOoo0OO0OOO = IiI11iII1 . read ( )
  IiI11iII1 . close ( )
 except :
  return None
  if 29 - 29: iI1 - iIiIiIiIIi - i1II1I11 % OO0o - iIiIiIiIIi
 o0OOoo0OO0OOO = o0OOoo0OO0OOO . replace ( ' =' , '=' )
 o0OOoo0OO0OOO = o0OOoo0OO0OOO . replace ( '= ' , '=' )
 o0OOoo0OO0OOO = o0OOoo0OO0OOO . replace ( ' = ' , '=' )
 if 91 - 91: OoOooOOOO / i1II1I11 - II111iiii . i1II1I11
 return o0OOoo0OO0OOO
 if 18 - 18: I1iiiiI1iII
 if 98 - 98: OO0o * OO0o / OO0o + i1II1I11
def ii111111I1iII ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'languagelist.txt' ) )
 if 68 - 68: OO0o - iIii1I11I1II1 * i11iIiiIii / iIii1 * O0o0Oo
 i1iIi1iIi1i = [ ]
 if 46 - 46: O0o0Oo % i1II1I11 + OoOooOOOO . OoOO . OoOooOOOO
 try :
  IiI11iII1 = open ( file , 'r' )
  oO00o0 = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return i1iIi1iIi1i
  if 55 - 55: iI1 + iIii1I11I1II1 / OoOO * iIiIiIiIIi - i11iIiiIii - i1I
 for ii1ii1ii in oO00o0 :
  if ii1ii1ii . startswith ( '#' ) :
   continue
  oooooOoo0ooo = ii1ii1ii . split ( '\t' )
  if len ( oooooOoo0ooo ) < 6 :
   continue
   if 6 - 6: i1II1I11 - i1I + iIii1I11I1II1 - O0o0Oo - i11iIiiIii
  OO0oOO0O = oooooOoo0ooo [ 0 ]
  oO = oooooOoo0ooo [ 1 ]
  dir = oooooOoo0ooo [ 2 ]
  iIi1IIIi1 = oooooOoo0ooo [ 3 ]
  O0oOoOOOoOO = oooooOoo0ooo [ 4 ]
  ii1ii11IIIiiI = oooooOoo0ooo [ 5 ] . replace ( '\n' , '' )
  i1iIi1iIi1i . append ( [ OO0oOO0O , oO , dir , iIi1IIIi1 , O0oOoOOOoOO ] )
  if 67 - 67: i1II1I11 * iIiIiIiIIi * iIii1 + ooOoo0O / i1IIi
 i1iIi1iIi1i = sorted ( i1iIi1iIi1i )
 return i1iIi1iIi1i
 if 11 - 11: i1I + OO0o - O0o * iIiIiIiIIi % i11iIiiIii - O0o0Oo
 if 83 - 83: i1II1I11 / o00oo
def iIIiIi1iIII1 ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'skinlist.txt' ) )
 if 78 - 78: O0 . iIiIiIiIIi . II111iiii % ooOoo0O
 i1iIi = [ ]
 if 68 - 68: i11iIiiIii % iIii1 + i11iIiiIii
 try :
  IiI11iII1 = open ( file , 'r' )
  oO00o0 = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return i1iIi
  if 31 - 31: II111iiii . o00oo
 for ii1ii1ii in oO00o0 :
  if ii1ii1ii . startswith ( '#' ) :
   continue
  oooooOoo0ooo = ii1ii1ii . split ( '\t' )
  if len ( oooooOoo0ooo ) < 4 :
   continue
   if 1 - 1: iI1 / I1iiiiI1iII % OO0o * oo . i11iIiiIii
  iI111iI = oooooOoo0ooo [ 0 ]
  III1Iiii1I11 = oooooOoo0ooo [ 1 ]
  id = oooooOoo0ooo [ 2 ]
  IIII = oooooOoo0ooo [ 3 ]
  iiIiI = oooooOoo0ooo [ 4 ]
  i1iIi . append ( [ iI111iI , III1Iiii1I11 , id , IIII , iiIiI ] )
 return i1iIi
 if 91 - 91: OO0o % i1IIi % iIii1I11I1II1
 if 20 - 20: ooOoo0O % i1I / i1I + i1I
def III1IiiI ( ) :
 file = '/usr/share/zoneinfo/iso3166.tab'
 if 31 - 31: I1iiiiI1iII . o00oo
 i1iIi1iIi1i = [ ]
 if 46 - 46: OO0o
 try :
  IiI11iII1 = open ( file , 'r' )
  oO00o0 = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return i1iIi1iIi1i
  if 8 - 8: iIiIiIiIIi * OoOO - i1I - OoOooOOOO * ooOoo0O % o00oo
 for ii1ii1ii in oO00o0 :
  if ii1ii1ii . startswith ( '#' ) :
   continue
  oooooOoo0ooo = ii1ii1ii . split ( '\t' )
  if len ( oooooOoo0ooo ) < 2 :
   continue
   if 48 - 48: O0
  I1IiiI = oooooOoo0ooo [ 0 ]
  OO0oOO0O = oooooOoo0ooo [ 1 ] . replace ( '\n' , '' )
  i1iIi1iIi1i . append ( [ OO0oOO0O , I1IiiI ] )
  if 44 - 44: iI1 . OoOooOOOO / iIii1 + i1I
 i1iIi1iIi1i = sorted ( i1iIi1iIi1i )
 return i1iIi1iIi1i
 if 65 - 65: O0
 if 68 - 68: ooOoo0O % O0o0Oo
def ooO00OO0 ( theCode ) :
 file = '/usr/share/zoneinfo/zone.tab'
 if 31 - 31: OO0o % OO0o % i1II1I11
 OOOOoo0Oo = [ ]
 if 14 - 14: OO0o
 try :
  IiI11iII1 = open ( file , 'r' )
  oO00o0 = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return OOOOoo0Oo
  if 11 - 11: oo * o00oo . iIii1I11I1II1 % OoooooooOO + OO0o
 for ii1ii1ii in oO00o0 :
  if ii1ii1ii . startswith ( '#' ) :
   continue
  oooooOoo0ooo = ii1ii1ii . split ( '\t' )
  if len ( oooooOoo0ooo ) < 3 :
   continue
   if 78 - 78: OoOooOOOO . ooOoo0O + OoOooOOOO / i1II1I11 / OoOooOOOO
  I1IiiI = oooooOoo0ooo [ 0 ]
  oO0O00OoOO0 = oooooOoo0ooo [ 1 ]
  OoO = oooooOoo0ooo [ 2 ] . replace ( '\n' , '' )
  if 88 - 88: OO0o . II111iiii * II111iiii % O0o0Oo
  if I1IiiI != theCode :
   if len ( OOOOoo0Oo ) > 0 :
    if 15 - 15: i1IIi * o00oo + i11iIiiIii
    break
  else :
   OOOOoo0Oo . append ( OoO )
   if 6 - 6: O0o / i11iIiiIii + OO0o * iIiIiIiIIi
 OOOOoo0Oo = sorted ( OOOOoo0Oo )
 return OOOOoo0Oo
 if 80 - 80: II111iiii
 if 83 - 83: i1II1I11 . i11iIiiIii + II111iiii . I1iiiiI1iII * i1II1I11
def oooO0 ( ) :
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'charset.txt' ) )
 if 46 - 46: O0o0Oo
 oooOOoOO = xbmc . getLocalizedString ( 13278 )
 if 9 - 9: I1iiiiI1iII . O0o - iI1 - iIiIiIiIIi + II111iiii * i11iIiiIii
 oO00ooO0o0 = [ ]
 try :
  IiI11iII1 = open ( file , 'r' )
  oO00o0 = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return oO00ooO0o0
  if 47 - 47: OO0o - i1I . II111iiii + OoooooooOO . i11iIiiIii
 for ii1ii1ii in oO00o0 :
  ii1ii1ii = ii1ii1ii . replace ( '"' , '' )
  ii1ii1ii = ii1ii1ii . replace ( '\r' , '' )
  ii1ii1ii = ii1ii1ii . replace ( '\n' , '' )
  ii1ii1ii = ii1ii1ii . split ( ',' )
  if len ( ii1ii1ii ) < 2 :
   continue
   if 94 - 94: I1iiiiI1iII * i1I / iI1 / i1I
  oO00ooO0o0 . append ( [ ii1ii1ii [ 1 ] . strip ( ) , ii1ii1ii [ 0 ] . strip ( ) ] )
  if 87 - 87: iI1 . oo
 oO00ooO0o0 = sorted ( oO00ooO0o0 )
 oO00ooO0o0 . insert ( 0 , [ oooOOoOO , 'DEFAULT' ] )
 return oO00ooO0o0
 if 75 - 75: O0o + OoOO + I1iiiiI1iII * i1II1I11 % iIiIiIiIIi . OO0o
 if 55 - 55: ooOoo0O . o00oo
def oOo0O0o00o ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 57 - 57: O0o0Oo % i1I + I1iiiiI1iII - iI1
 o0O = 'subtitles.charset'
 oooOOoOO = xbmc . getLocalizedString ( 13278 )
 if 39 - 39: II111iiii / O0o + O0o0Oo / OoOO
 oO00ooO0o0 = oooO0 ( )
 if 13 - 13: oo + O0 + OO0o % o00oo / I1iiiiI1iII . oo
 if len ( oO00ooO0o0 ) == 0 :
  return
  if 86 - 86: iIiIiIiIIi * I1iiiiI1iII % i1IIi . i1I . i11iIiiIii
 for oOOoo00O00o , O0O00Oo in enumerate ( oO00ooO0o0 ) :
  o00oO0oo0OO . append ( [ O0O00Oo [ 0 ] , oOOoo00O00o ] )
  if 97 - 97: O0 * OoooooooOO . OoooooooOO
 I111iI = OOoOO00OOO0OO ( o0O )
 if 56 - 56: o00oo
 for O0O00Oo in oO00ooO0o0 :
  if I111iI == O0O00Oo [ 1 ] :
   I111iI = O0O00Oo [ 0 ]
   break
   if 54 - 54: O0o0Oo / ooOoo0O . iIiIiIiIIi % OO0o
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 31380 ) , o00oO0oo0OO , I111iI )
 if 81 - 81: O0 / OoOooOOOO . i1IIi + o00oo - i1II1I11
 if OoO0OOOOo0O < 0 :
  return
  if 74 - 74: iIii1I11I1II1 * iIii1 + OoOO / i1IIi / II111iiii . iI1
 oooOo0OOOoo0 = oO00ooO0o0 [ OoO0OOOOo0O ] [ 0 ]
 if 51 - 51: iI1 / OoOO . ooOoo0O * I1iiiiI1iII + OoOooOOOO * oo
 if oooOo0OOOoo0 == I111iI :
  return
  if 73 - 73: OoOooOOOO + OoooooooOO - O0 - i1I - II111iiii
 O0O00Oo = oO00ooO0o0 [ OoO0OOOOo0O ] [ 1 ]
 if 99 - 99: O0o . i1I + O0o0Oo + OoooooooOO % I1iiiiI1iII
 if O0O00Oo == I111iI :
  return
  if 51 - 51: iIii1I11I1II1
 O0oo0OO0oOOOo ( o0O , O0O00Oo )
 ooo ( 'Skin.SetBool(SubtitleCharsetSet)' )
 xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( o0O , oooOo0OOOoo0 ) )
 if 34 - 34: iIiIiIiIIi + o00oo - iIiIiIiIIi
 if 17 - 17: II111iiii % OO0o + i1II1I11 - OO0o / ooOoo0O + O0o
def O0oO000O0O ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 18 - 18: OO0o - ooOoo0O . O0o0Oo . iIii1I11I1II1
 o0O = 'locale.timezone'
 if 2 - 2: ooOoo0O . OoOooOOOO
 I1IiiI = '??'
 i1iIi1iIi1i = III1IiiI ( )
 OO0oOO0O = OOoOO00OOO0OO ( 'locale.timezonecountry' )
 if 78 - 78: i1II1I11 * iIii1I11I1II1 . o00oo / I1iiiiI1iII - OoooooooOO / O0o0Oo
 for iI1iI1I1i1I in i1iIi1iIi1i :
  if OO0oOO0O . lower ( ) == iI1iI1I1i1I [ 0 ] . lower ( ) :
   I1IiiI = iI1iI1I1i1I [ 1 ]
   break
   if 35 - 35: i1II1I11 % ooOoo0O - iIiIiIiIIi
 ii1iii1i = ooO00OO0 ( I1IiiI )
 if 35 - 35: II111iiii % ooOoo0O . O0o + O0o % II111iiii % II111iiii
 if len ( ii1iii1i ) == 0 :
  return
  if 72 - 72: II111iiii + i1IIi + I1iiiiI1iII
 for oOOoo00O00o , OoO in enumerate ( ii1iii1i ) :
  o00oO0oo0OO . append ( [ OoO , oOOoo00O00o ] )
  if 94 - 94: iIiIiIiIIi . i1IIi - I1iiiiI1iII % O0 - OoOooOOOO
 I111iI = OOoOO00OOO0OO ( o0O )
 if 72 - 72: i1I
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 14080 ) , o00oO0oo0OO , I111iI )
 if 1 - 1: OoOooOOOO * oo * OoooooooOO + O0o
 if OoO0OOOOo0O < 0 :
  return
  if 33 - 33: O0 * I1iiiiI1iII - O0o0Oo % O0o0Oo
 I11I = o00oO0oo0OO [ OoO0OOOOo0O ] [ 0 ]
 if 50 - 50: O0o0Oo * i11iIiiIii * iIii1I11I1II1 - II111iiii * I1iiiiI1iII * OoOO
 if I11I == I111iI :
  return
  if 94 - 94: OoooooooOO + OoooooooOO . II111iiii + i1II1I11 / iIii1 % i1I
 O0oo0OO0oOOOo ( o0O , I11I )
 ooo ( 'Skin.SetBool(TimezoneSet)' )
 I1Ii1iiiiii1 ( o0O )
 if 96 - 96: i11iIiiIii % ooOoo0O
 if 70 - 70: iIii1I11I1II1
def i11ii1iI ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 22 - 22: OoooooooOO
 o0O = 'locale.timezonecountry'
 if 75 - 75: I1iiiiI1iII + I1iiiiI1iII + i1IIi - i1IIi
 i1iIi1iIi1i = III1IiiI ( )
 if 76 - 76: OoOooOOOO . O0 % O0 - I1iiiiI1iII - iIii1I11I1II1 - o00oo
 for oOOoo00O00o , OO0oOO0O in enumerate ( i1iIi1iIi1i ) :
  o00oO0oo0OO . append ( [ OO0oOO0O [ 0 ] , oOOoo00O00o ] )
  if 53 - 53: i1IIi
 I111iI = OOoOO00OOO0OO ( o0O )
 if 59 - 59: I1iiiiI1iII
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 14080 ) , o00oO0oo0OO , I111iI )
 if 81 - 81: OoOO - OoOO . OO0o
 if OoO0OOOOo0O < 0 :
  return
  if 73 - 73: i1II1I11 % i11iIiiIii - o00oo
 I11I = o00oO0oo0OO [ OoO0OOOOo0O ] [ 0 ]
 if 7 - 7: O0 * i11iIiiIii * i1I + O0o % OoOooOOOO - O0o
 if I11I == I111iI :
  return
  if 39 - 39: iI1 * ooOoo0O % ooOoo0O - OoooooooOO + I1iiiiI1iII - i1II1I11
 O0oo0OO0oOOOo ( o0O , I11I )
 ooo ( 'Skin.SetBool(TimezoneCountrySet)' )
 I1Ii1iiiiii1 ( o0O )
 if 23 - 23: i11iIiiIii
 if 30 - 30: I1iiiiI1iII - i1IIi % II111iiii + i1II1I11 * iIii1I11I1II1
def o0ooooO0o0O ( ) :
 import select
 import re
 if 24 - 24: O0 * I1iiiiI1iII
 o00oO0oo0OO = [ ]
 o0O = 'locale.language'
 i1iIi1iIi1i = ii111111I1iII ( )
 IiI1iiiIii = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'flags' ) )
 I111iI = OOoOO00OOO0OO ( o0O )
 I1III1111iIi = str ( I111iI )
 I1i111I = "languages=\n"
 I1i111I += I1III1111iIi
 o00O ( I1i111I , I11 )
 if 97 - 97: i1IIi . iIiIiIiIIi / OO0o * O0
 iiIiI = ''
 if 73 - 73: ooOoo0O / iIiIiIiIIi
 for iI1iI1I1i1I in i1iIi1iIi1i :
  try :
   o0OO0o0o00o = "(" + iI1iI1I1i1I [ 1 ] + ")"
   OO0oOO0O = o0OO0o0o00o . replace ( "_" , " " )
   oOo0 = iI1iI1I1i1I [ 4 ]
   OOOoOO = os . path . join ( IiI1iiiIii , '%s.png' % oOo0 )
   I11IIIi = iI1iI1I1i1I [ 0 ]
   iIIiiI1II1i11 = I11IIIi . replace ( "_" , " " )
   dir = iI1iI1I1i1I [ 2 ]
   o0o0 = os . path . exists ( OOOoOO )
   iiIiI = iI1iI1I1i1I [ 5 ]
  except :
   pass
   if 49 - 49: iIiIiIiIIi - i11iIiiIii . O0o0Oo * i1I % OO0o + i1IIi
  if not o0o0 :
   OOOoOO = oOO0OOOo ( dir )
   OOOoOO = os . path . join ( IiI1iiiIii , '%s.png' % OOOoOO )
  o00oO0oo0OO . append ( [ iIIiiI1II1i11 + " " + OO0oOO0O , dir , OOOoOO , iiIiI ] )
  if 56 - 56: I1iiiiI1iII
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 309 ) , o00oO0oo0OO , I111iI )
 oO = OoO0OOOOo0O
 if 28 - 28: OO0o . OO0o % iIii1I11I1II1 * iIii1I11I1II1 . I1iiiiI1iII / OO0o
 if oO == I111iI :
  return
  if 27 - 27: OoOooOOOO + O0o - i1IIi
 O0oo0OO0oOOOo ( o0O , oO )
 O0oo0OO0oOOOo ( 'locale.charset' , 'DEFAULT' )
 ooo ( 'Skin.SetBool(LanguageSet)' )
 I1Ii1iiiiii1 ( o0O )
 return
 if 69 - 69: oo - O0 % iIii1 + i11iIiiIii . OoOO / OoOooOOOO
 if 79 - 79: O0 * i11iIiiIii - oo / oo
 if 48 - 48: O0
 if 93 - 93: i11iIiiIii - o00oo * iIii1 * i1II1I11 % O0 + OoooooooOO
def I1i1i1 ( ) :
 import select
 import re
 if 73 - 73: O0 * OO0o + i1I + O0o
 o00oO0oo0OO = [ ]
 o0O = 'lookandfeel.skin'
 i1iIi = iIIiIi1iIII1 ( )
 I111iI = OOoOO00OOO0OO ( o0O )
 O0oo0OO0 = os . path . join ( i1 , 'addons' )
 Ii = os . path . join ( o0oO0 , 'addons' )
 iiIiI = ''
 IIII = ''
 if 100 - 100: O0o0Oo + ooOoo0O + ooOoo0O
 for iI1iI1I1i1I in i1iIi :
  try :
   iI111iI = iI1iI1I1i1I [ 0 ]
   III1Iiii1I11 = iI1iI1I1i1I [ 1 ]
   id = iI1iI1I1i1I [ 2 ]
   I1ii1I1iiii = os . path . join ( O0oo0OO0 , id , 'icon.png' )
   iiI = os . path . join ( I1ii1I1iiii , 'icon.png' )
   IIII = iI1iI1I1i1I [ 3 ]
   iiIiI = iI1iI1I1i1I [ 4 ]
   o0o0 = os . path . exists ( I1ii1I1iiii )
  except :
   pass
  if not o0o0 :
   I1ii1I1iiii = os . path . join ( Ii , id , 'icon.png' )
   iiI = os . path . join ( I1ii1I1iiii , 'icon.png' )
  o00oO0oo0OO . append ( [ iI111iI , id , I1ii1I1iiii , iiIiI ] )
  I1III1111iIi = str ( o00oO0oo0OO )
  I1i111I = "menu=\n"
  I1i111I += "menu=\n"
  I1i111I += I1III1111iIi
  o00O ( I1i111I , I11 )
 I111iI = OOoOO00OOO0OO ( o0O )
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 424 ) + " " + xbmc . getLocalizedString ( 166 ) , o00oO0oo0OO , I111iI )
 if OoO0OOOOo0O < 0 :
  return
  if 56 - 56: iI1 . iIii1 . o00oo
 iI111iI = OoO0OOOOo0O
 if 39 - 39: O0 + O0o0Oo
 if iI111iI == I111iI :
  return
 O0oo0OO0oOOOo ( o0O , iI111iI )
 while iI111iI != I111iI :
  xbmc . executebuiltin ( 'Action(Select)' )
  I111iI = OOoOO00OOO0OO ( o0O )
 ooo ( 'Skin.SetBool(SkinSet)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
 xbmc . executebuiltin ( 'Notification(Please Wait 10 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 9 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 8 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 7 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 6 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 5 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 4 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 3 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 2 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 1 Second,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'RunScript(' + Oo0o0000o0o0 + 'skincontrol.py)' )
 if 91 - 91: OoooooooOO - iIii1I11I1II1 + OoOO / OoOooOOOO . OoOO + O0
 if 26 - 26: iIii1 - OoooooooOO
 if 11 - 11: o00oo * iIiIiIiIIi
 if 81 - 81: OO0o + oo
 if 98 - 98: o00oo
 if 95 - 95: O0o / O0o
 if 30 - 30: iIii1 + iI1 / iI1 % iIii1 . iIii1
def oOO0OOOo ( country ) :
 country = country . lower ( )
 if 55 - 55: O0o - i1II1I11 + II111iiii + OO0o % i1I
 if country == 'basque' : return 'bq'
 if country == 'filipino' : return 'ph'
 if country == 'haitian (haitian creole)' : return 'ht'
 if country == 'georgian' : return 'un'
 if country == 'lithuanian' : return 'lt'
 if country == 'mongolian (mongolia)' : return 'un'
 if country == 'romansh' : return 'rm'
 if country == 'sinhala' : return 'un'
 if country == 'spanish (venezuela)' : return 'un'
 if country == 'vietnamese (viet nam)' : return 'vi'
 if 41 - 41: i1IIi - i1II1I11 - i1I
 return 'un'
 if 8 - 8: OoOooOOOO + O0o0Oo - I1iiiiI1iII % iI1 % I1iiiiI1iII * iIiIiIiIIi
 if 9 - 9: iI1 - i11iIiiIii - ooOoo0O * i1I + O0o
def iIIII ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 45 - 45: iIii1 % o00oo - i11iIiiIii
 o0O = 'subtitles.languages'
 if 11 - 11: iIii1I11I1II1 * iIii1I11I1II1 * o00oo
 iI111iI = xbmc . getSkinDir ( ) . lower ( )
 O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' , iI111iI , 'language' ) )
 if 46 - 46: OoOO + OoOooOOOO
 try :
  I111iI , o0o0O , ooooO0oOoOOoO = os . walk ( O0oo0OO0 ) . next ( )
 except :
  o0o0O = [ ]
  if 20 - 20: i1II1I11 + i1I / O0 % iIii1I11I1II1
 if len ( o0o0O ) == 0 :
  O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://xbmc/addons/' , iI111iI , 'language' ) )
  if 88 - 88: OoOO / II111iiii
  try :
   I111iI , o0o0O , ooooO0oOoOOoO = os . walk ( O0oo0OO0 ) . next ( )
  except :
   return
   if 87 - 87: iIii1 - iIii1 - OO0o + iIiIiIiIIi
 if len ( o0o0O ) == 0 :
  return
  if 82 - 82: iIiIiIiIIi / iIii1I11I1II1 . o00oo . ooOoo0O / I1iiiiI1iII
 o0o0O = sorted ( o0o0O , key = str . lower )
 if 42 - 42: iI1
 IiI1iiiIii = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'flags' ) )
 if 19 - 19: iIiIiIiIIi % iIii1 * iIii1I11I1II1 + o00oo
 import re
 for oOOoo00O00o , dir in enumerate ( o0o0O ) :
  o0o0 = False
  I1IiiI = ''
  try :
   o0OOoo0OO0OOO = i11iIIIIIi1 ( dir )
   I1IiiI = re . compile ( '<language locale="(.+?)">' ) . search ( o0OOoo0OO0OOO ) . group ( 1 )
   OOOoOO = os . path . join ( IiI1iiiIii , '%s.png' % I1IiiI . lower ( ) )
   o0o0 = os . path . exists ( OOOoOO )
  except :
   pass
   if 46 - 46: iI1
  if not o0o0 :
   OOOoOO = oOO0OOOo ( dir )
   OOOoOO = os . path . join ( IiI1iiiIii , '%s.png' % OOOoOO )
   if 1 - 1: OO0o
  o00oO0oo0OO . append ( [ dir , oOOoo00O00o , OOOoOO ] )
  if 97 - 97: ooOoo0O + OO0o + O0 + i11iIiiIii
 list = OOoOO00OOO0OO ( o0O )
 I111iI = None
 if 77 - 77: I1iiiiI1iII / OoooooooOO
 if len ( list ) > 0 :
  I111iI = list [ 0 ]
  if 46 - 46: I1iiiiI1iII % iIii1I11I1II1 . OO0o % OO0o + i11iIiiIii
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 21448 ) , o00oO0oo0OO , I111iI )
 if 72 - 72: iIii1I11I1II1 * i1I % O0o / OoOooOOOO
 if OoO0OOOOo0O < 0 :
  return
  if 35 - 35: O0o + i1IIi % iIii1 % i1II1I11 + iIiIiIiIIi
 oO = o00oO0oo0OO [ OoO0OOOOo0O ] [ 0 ]
 if 17 - 17: i1IIi
 if ( oO == I111iI ) and ( len ( list ) == 1 ) :
  return
  if 21 - 21: iI1
 O0oo0OO0oOOOo ( o0O , [ oO ] )
 ooo ( 'Skin.SetBool(SubtitleDownloadSet)' )
 I1Ii1iiiiii1 ( o0O )
 if 29 - 29: i1II1I11 / II111iiii / O0o * ooOoo0O
 if 10 - 10: O0o0Oo % oo * oo . i1II1I11 / i1I % ooOoo0O
def IIII1 ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 10 - 10: O0o0Oo / O0o + i11iIiiIii / i1I
 OOOoOoO = xbmc . getLocalizedString ( 308 )
 oooOOoOO = xbmc . getLocalizedString ( 309 )
 if 22 - 22: o00oo % iIii1
 o0O = 'locale.subtitlelanguage'
 if 57 - 57: ooOoo0O + O0 . i1I
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'subtitle.txt' ) )
 if 46 - 46: oo
 ii1iIi1iIiI1i = [ ]
 try :
  IiI11iII1 = open ( file , 'r' )
  ii1iIi1iIiI1i = IiI11iII1 . readlines ( )
  IiI11iII1 . close ( )
 except :
  return
  if 40 - 40: i1IIi % ooOoo0O
 ii1iIi1iIiI1i = sorted ( ii1iIi1iIiI1i , key = str . lower )
 if 71 - 71: OoOO
 o00oO0oo0OO . append ( [ OOOoOoO , 0 ] )
 o00oO0oo0OO . append ( [ oooOOoOO , 1 ] )
 if 14 - 14: i11iIiiIii % ooOoo0O
 oOOoo00O00o = 2
 if 82 - 82: iIii1I11I1II1 + iI1 . iIii1I11I1II1 % oo / i1I . i1I
 for OoO0OOOOo0O in ii1iIi1iIiI1i :
  exec ( OoO0OOOOo0O )
  o00oO0oo0OO . append ( [ OoO0OOOOo0O , oOOoo00O00o ] )
  oOOoo00O00o += 1
  if 14 - 14: I1iiiiI1iII . ooOoo0O . i1II1I11 + OoooooooOO - ooOoo0O + oo
 I111iI = OOoOO00OOO0OO ( o0O )
 if 9 - 9: i1I
 if I111iI == 'original' :
  I111iI = OOOoOoO
 elif I111iI == 'default' :
  I111iI = oooOOoOO
  if 59 - 59: o00oo * II111iiii . O0
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 286 ) , o00oO0oo0OO , I111iI )
 if 56 - 56: i1I - OO0o % o00oo - I1iiiiI1iII
 if OoO0OOOOo0O < 0 :
  return
  if 51 - 51: O0 / O0o * iIii1I11I1II1 + iIii1 + I1iiiiI1iII
 if OoO0OOOOo0O == 0 :
  oO = 'original'
 elif OoO0OOOOo0O == 1 :
  oO = 'default'
 else :
  oO = o00oO0oo0OO [ OoO0OOOOo0O ] [ 0 ]
  if 98 - 98: iIii1I11I1II1 * iIii1 * ooOoo0O + O0o % i11iIiiIii % O0
 if oO == I111iI :
  return
  if 27 - 27: O0
 O0oo0OO0oOOOo ( o0O , oO )
 ooo ( 'Skin.SetBool(SubtitlePreferredSet)' )
 I1Ii1iiiiii1 ( o0O )
 if 79 - 79: I1iiiiI1iII - i1II1I11 + I1iiiiI1iII . iIiIiIiIIi
 if 28 - 28: i1IIi - OO0o
def o00o000oo ( ) :
 import select
 o00oO0oo0OO = [ ]
 if 44 - 44: o00oo - i1II1I11 % iIii1I11I1II1
 o0O = 'locale.country'
 if 71 - 71: O0o . i1I - OoooooooOO % i1I . II111iiii
 oO = OOoOO00OOO0OO ( 'locale.language' )
 o0OOoo0OO0OOO = i11iIIIIIi1 ( oO )
 if 89 - 89: OO0o . O0 / iIii1 % OoOO . iI1
 if not o0OOoo0OO0OOO :
  return
  if 50 - 50: II111iiii + iIii1 . i1IIi % I1iiiiI1iII
 import re
 if 5 - 5: OoOO / OoooooooOO + oo * O0o0Oo - OoOooOOOO % o00oo
 IiII1 = [ ]
 if 18 - 18: O0o * OoOO . OO0o / iIii1 / i11iIiiIii
 IIIII = re . compile ( '<region name="(.+?)"' ) . findall ( o0OOoo0OO0OOO )
 for o0ooOoO000oO in IIIII :
  IiII1 . append ( o0ooOoO000oO )
  if 85 - 85: I1iiiiI1iII . OoOO / O0o . O0 % O0o0Oo
 IIIII = re . compile ( '<locale="(.+?)">' ) . findall ( o0OOoo0OO0OOO )
 for o0ooOoO000oO in IIIII :
  IiII1 . append ( o0ooOoO000oO )
  if 90 - 90: iI1 % O0 * iIii1I11I1II1 . OO0o
 IiII1 . sort ( )
 if 8 - 8: O0o + II111iiii / OO0o / i1II1I11
 for oOOoo00O00o , o0ooOoO000oO in enumerate ( IiII1 ) :
  o00oO0oo0OO . append ( [ o0ooOoO000oO , oOOoo00O00o ] )
  if 74 - 74: O0 / i1IIi
 if len ( o00oO0oo0OO ) < 1 :
  return
  if 78 - 78: OoooooooOO . OoOooOOOO + O0o - i1IIi
 I111iI = OOoOO00OOO0OO ( o0O )
 if 31 - 31: OoooooooOO . ooOoo0O
 OoO0OOOOo0O = select . select ( xbmc . getLocalizedString ( 20026 ) , o00oO0oo0OO , I111iI )
 if 83 - 83: OO0o . O0 / iI1 / ooOoo0O - II111iiii
 if OoO0OOOOo0O < 0 :
  return
  if 100 - 100: OoOooOOOO
 o0ooOoO000oO = o00oO0oo0OO [ OoO0OOOOo0O ] [ 0 ]
 if 46 - 46: OoOO / iIii1I11I1II1 % OO0o . iIii1I11I1II1 * OO0o
 if o0ooOoO000oO == I111iI :
  return
  if 38 - 38: iIii1 - OO0o / O0 . O0o0Oo
 O0oo0OO0oOOOo ( o0O , o0ooOoO000oO )
 ooo ( 'Skin.SetBool(RegionSet)' )
 I1Ii1iiiiii1 ( o0O )
 if 45 - 45: O0o0Oo
 if 83 - 83: OoOO . OoooooooOO
def Oo0ooo ( up ) :
 o0O = 'lookandfeel.skinzoom'
 II = OOoOO00OOO0OO ( o0O )
 if 25 - 25: iIii1 + O0
 if ( up ) :
  II += 2
 else :
  II -= 2
  if 28 - 28: OoooooooOO
 if II > 20 :
  II = - 20
  if 89 - 89: OO0o - O0o % iI1 % I1iiiiI1iII
 if II < - 20 :
  II = 20
  if 49 - 49: iI1 - o00oo / oo / O0 % I1iiiiI1iII * i1I
 O0oo0OO0oOOOo ( o0O , II )
 I1Ii1iiiiii1 ( o0O )
 if 100 - 100: ooOoo0O . OO0o / O0 * i1IIi * i1I * iI1
def OO00 ( ) :
 I1Ii1iiiiii1 ( 'locale.language' )
 I1Ii1iiiiii1 ( 'locale.subtitlelanguage' )
 I1Ii1iiiiii1 ( 'locale.country' )
 I1Ii1iiiiii1 ( 'locale.timezonecountry' )
 I1Ii1iiiiii1 ( 'locale.timezone' )
 I1Ii1iiiiii1 ( 'lookandfeel.skinzoom' )
 I1Ii1iiiiii1 ( 'subtitles.languages' )
 I1Ii1iiiiii1 ( 'subtitles.charset' )
 if 92 - 92: i1II1I11
 if 95 - 95: OoooooooOO - oo * o00oo + OoOO
 if 10 - 10: I1iiiiI1iII / i11iIiiIii
 if 92 - 92: i1II1I11 . O0o0Oo
 o0O = 'lookandfeel.skin'
 iI111iI = OOoOO00OOO0OO ( o0O )
 if iI111iI :
  if iI111iI . startswith ( 'skin.' ) :
   iI111iI = iI111iI [ 5 : ]
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( o0O , iI111iI ) )
  if 85 - 85: iIii1 . O0o0Oo
  if 78 - 78: O0o * O0o0Oo + iIii1I11I1II1 + iIii1I11I1II1 / O0o0Oo . i1I
def I1Ii1iiiiii1 ( setting ) :
 II = OOoOO00OOO0OO ( setting )
 if 97 - 97: O0o / O0o0Oo % i1IIi % iIii1
 if isinstance ( II , list ) :
  II = str ( II [ 0 ] )
 else :
  II = str ( II )
  if 18 - 18: iIii1I11I1II1 % i1II1I11
 if setting == 'subtitles.charset' :
  oO00ooO0o0 = oooO0 ( )
  for O0O00Oo in oO00ooO0o0 :
   if II == O0O00Oo [ 1 ] :
    xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , O0O00Oo [ 0 ] ) )
    break
  return
  if 95 - 95: O0o + i11iIiiIii * O0o0Oo - i1IIi * O0o0Oo - iIii1I11I1II1
 if setting == 'locale.timezonecountry' and len ( II ) == 0 :
  II = 'Default'
  if 75 - 75: OoooooooOO * oo
 if II :
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , II ) )
 else :
  xbmc . executebuiltin ( 'Skin.Reset(%s)' % setting )
  if 9 - 9: oo - II111iiii + O0 / iIii1I11I1II1 / i11iIiiIii
  if 39 - 39: oo * iI1 + iIii1I11I1II1 - oo + ooOoo0O
class o0 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  global oo0o0O00
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  self . icon = kwargs [ 'icon' ]
  self . maintext = kwargs [ 'maintext' ]
  if 30 - 30: O0 * OoooooooOO
  if not os . path . exists ( oOOoo00O0O ) :
   self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/whitebg.jpg' ) )
   if 38 - 38: oo - iIii1 . OoOO - O0o0Oo . OoooooooOO
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , oOOoo00O0O ) )
  self . updateimage = xbmcgui . ControlImage ( 200 , 230 , 250 , 250 , Oo0o0000o0o0 + 'resources/images/' + self . icon )
  self . addControl ( self . updateimage )
  self . updateimage . setAnimations ( [ ( 'conditional' , 'effect=rotate start=0 end=360 center=auto time=3000 loop=true condition=true' , ) ] )
  if 89 - 89: iIii1I11I1II1
  if 21 - 21: i1II1I11 % i1II1I11
  if 27 - 27: i11iIiiIii / iIii1
  if 84 - 84: iI1
  if 43 - 43: iIiIiIiIIi - OoooooooOO
  if 3 - 3: O0 / OO0o
  if not os . path . exists ( oOOoo00O0O ) :
   self . strDescription = xbmcgui . ControlTextBox ( 570 , 250 , 600 , 300 , 'font14' , '0xFF000000' )
   self . addControl ( self . strDescription )
   self . strDescription . setText ( self . maintext )
   if 31 - 31: ooOoo0O + I1iiiiI1iII . OoooooooOO
 def onAction ( self , action ) :
  if action == I1ii11iIi11i or action == Oo :
   print "ESC and HOME Disabled"
   if 89 - 89: II111iiii + i1IIi + II111iiii
   if 7 - 7: O0 % I1iiiiI1iII + iIii1 * OO0o - OO0o
class II1Ii11I111I ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  if 13 - 13: O0o / OO0o * OoOooOOOO . OoOooOOOO * O0o
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = kwargs [ 'backbutton' ]
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = kwargs [ 'nextbutton' ]
  else :
   self . nextbutton = ''
   if 63 - 63: O0o0Oo / O0 * iI1 + II111iiii / oo + i1I
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 63 - 63: OoOooOOOO + iIii1 . O0o0Oo % O0o0Oo
  if kwargs [ 'selectbutton' ] != '' :
   self . selectbutton = kwargs [ 'selectbutton' ]
  else :
   self . selectbutton = ''
  self . toggleup = kwargs [ 'toggleup' ]
  self . toggledown = kwargs [ 'toggledown' ]
  self . selectbuttonfunction = kwargs [ 'selectbuttonfunction' ]
  self . toggleupfunction = kwargs [ 'toggleupfunction' ]
  self . toggledownfunction = kwargs [ 'toggledownfunction' ]
  self . maintext = kwargs [ 'maintext' ]
  if 57 - 57: II111iiii
  if kwargs [ 'noconnectionbutton' ] != '' :
   self . noconnectionbutton = kwargs [ 'noconnectionbutton' ]
  else :
   self . noconnectionbutton = ''
   if 54 - 54: iI1 + iIiIiIiIIi + i11iIiiIii
  self . noconnectionfunction = kwargs [ 'noconnectionfunction' ]
  if 28 - 28: iIiIiIiIIi
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if 70 - 70: oo
  if 34 - 34: O0o0Oo % oo
  self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button1 )
  if 3 - 3: II111iiii / ooOoo0O + oo . O0o . OoOooOOOO
  if 83 - 83: iIiIiIiIIi + OoooooooOO
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 22 - 22: i1I % OO0o * OoooooooOO - I1iiiiI1iII / iIii1I11I1II1
   if 86 - 86: OoooooooOO . OO0o % OoOO / i1II1I11 * OO0o / I1iiiiI1iII
  if self . toggleup == '' :
   if self . noconnectionbutton == '' :
    self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   else :
    if i1111 != '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
    elif i1111 == '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . noconnectionbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button0 )
   self . button0 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button0 . controlUp ( self . button1 )
   if self . backbutton != '' :
    self . button0 . controlLeft ( self . button2 )
  else :
   self . toggleupbutton = xbmcgui . ControlButton ( 1000 , 480 , 35 , 35 , '' , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . toggledownbutton = xbmcgui . ControlButton ( 1000 , 500 , 35 , 35 , '' , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . toggleupbutton )
   self . addControl ( self . toggledownbutton )
   self . strToggleUp = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . strToggleDown = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . addControl ( self . strToggleUp )
   self . addControl ( self . strToggleDown )
   self . strToggleUp . setLabel ( self . toggleup )
   self . strToggleDown . setLabel ( self . toggledown )
   self . toggleupbutton . controlDown ( self . toggledownbutton )
   if self . backbutton != '' :
    self . toggleupbutton . controlLeft ( self . button2 )
    self . toggledownbutton . controlLeft ( self . button2 )
   self . toggledownbutton . controlUp ( self . toggleupbutton )
   self . toggledownbutton . controlDown ( self . button1 )
   if 64 - 64: i11iIiiIii
  if self . toggleup == '' :
   self . setFocus ( self . button1 )
  else :
   self . setFocus ( self . toggleupbutton )
   if 38 - 38: oo / o00oo - oo . i1II1I11
  if self . backbutton != '' :
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
  if self . toggleup == '' :
   self . button1 . controlUp ( self . button0 )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . button0 )
  else :
   self . button1 . controlUp ( self . toggledownbutton )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . toggledownbutton )
    if 69 - 69: OoooooooOO + iIii1
    if 97 - 97: ooOoo0O - OoOooOOOO / i1I . i11iIiiIii % iIiIiIiIIi * iIiIiIiIIi
    if 1 - 1: o00oo % O0o
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 65 - 65: o00oo + OoOO / ooOoo0O
  if i1111 == '0' :
   self . strWarning = xbmcgui . ControlTextBox ( 830 , 300 , 300 , 200 , 'font13' , '0xFFFF0000' )
   self . addControl ( self . strWarning )
   self . strWarning . setText ( 'No internet connection.[CR]To be able to get the most out of this device and set options like this you must be connected to the web. Please insert your ethernet cable or setup your Wi-Fi.' )
   if 83 - 83: I1iiiiI1iII . OO0o - iI1
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 65 - 65: iIii1I11I1II1 / O0o . oo - II111iiii
 def onAction ( self , action ) :
  if action == I1ii11iIi11i and self . selectbutton == 'Register' :
   self . close ( )
   Oo000 ( )
   if 81 - 81: ooOoo0O - ooOoo0O % II111iiii * OoOooOOOO
 def onControl ( self , control ) :
  if control == self . button0 :
   if i1111 != '0' or self . noconnectionbutton == '' :
    exec self . selectbuttonfunction
   else :
    exec self . noconnectionfunction
  if control == self . button1 :
   exec self . nextbuttonfunction
  if self . backbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
    if 39 - 39: i1II1I11
 def message ( self , message ) :
  iIiiiI = xbmcgui . Dialog ( )
  iIiiiI . ok ( " My message title" , message )
  if 58 - 58: i1IIi % I1iiiiI1iII
class OO000oooo0 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  if 77 - 77: o00oo % O0
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = kwargs [ 'backbutton' ]
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = kwargs [ 'nextbutton' ]
  else :
   self . nextbutton = ''
   if 36 - 36: i1I / II111iiii / oo / oo + iIii1
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 95 - 95: oo
  if kwargs [ 'optionbutton1' ] != '' :
   self . optionbutton1 = kwargs [ 'optionbutton1' ]
  else :
   self . optionbutton1 = ''
  if kwargs [ 'optionbutton2' ] != '' :
   self . optionbutton2 = kwargs [ 'optionbutton2' ]
  else :
   self . optionbutton2 = ''
  if kwargs [ 'optionbutton3' ] != '' :
   self . optionbutton3 = kwargs [ 'optionbutton3' ]
  else :
   self . optionbutton3 = ''
   if 51 - 51: II111iiii + oo . i1IIi . iIii1 + OoOO * o00oo
  self . maintext = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'maintext' ] )
  self . option1function = kwargs [ 'option1function' ]
  self . option2function = kwargs [ 'option2function' ]
  self . option3function = kwargs [ 'option3function' ]
  if 72 - 72: iIiIiIiIIi + iIiIiIiIIi / II111iiii . OoooooooOO % i1I
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if self . nextbutton != '' :
   self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button1 )
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 49 - 49: iIiIiIiIIi . OoOooOOOO - iI1 * OoooooooOO . iI1
  self . button0 = xbmcgui . ControlButton ( 910 , 400 , 225 , 35 , self . optionbutton1 , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
  self . button3 = xbmcgui . ControlButton ( 910 , 440 , 225 , 35 , self . optionbutton2 , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
  self . button4 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . optionbutton3 , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button0 )
  self . addControl ( self . button3 )
  self . addControl ( self . button4 )
  self . button0 . controlDown ( self . button3 )
  self . button3 . controlDown ( self . button4 )
  self . setFocus ( self . button1 )
  self . button3 . controlUp ( self . button0 )
  self . button4 . controlUp ( self . button3 )
  if self . nextbutton != '' :
   self . button0 . controlUp ( self . button1 )
   self . button3 . controlRight ( self . button1 )
   self . button4 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button4 . controlRight ( self . button1 )
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button1 . controlDown ( self . button0 )
   self . button1 . controlUp ( self . button4 )
  if self . backbutton != '' :
   self . button0 . controlLeft ( self . button2 )
   self . button3 . controlLeft ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
   self . button2 . controlUp ( self . button4 )
   self . button4 . controlLeft ( self . button2 )
   if 2 - 2: OoooooooOO % ooOoo0O
   if 63 - 63: o00oo % iIii1I11I1II1
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 39 - 39: OO0o / II111iiii / iIii1 % o00oo
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 89 - 89: O0o0Oo + OoooooooOO + O0o0Oo * i1IIi + iIii1I11I1II1 % i1II1I11
 def onAction ( self , action ) :
  if action == I1ii11iIi11i and 'Register' in self . header :
   self . close ( )
   if 59 - 59: ooOoo0O + i11iIiiIii
 def onControl ( self , control ) :
  if control == self . button0 :
   exec self . option1function
  if self . nextbutton != '' :
   if control == self . button1 :
    exec self . nextbuttonfunction
  if self . nextbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
  if control == self . button3 :
   exec self . option2function
  if control == self . button4 :
   exec self . option3function
   if 88 - 88: i11iIiiIii - O0o
def O0iIi1IiII ( ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30003 ) ,
 background = 'language1.png' ,
 backbutton = '' ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = '' ,
 nextbuttonfunction = 'self.close();Check_skins("language")' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30004 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "doSetLanguage();self.close();xbmc.executebuiltin('RunScript('+addonfolder+'skincontrol.py)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30005 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 72 - 72: iIii1I11I1II1
def iiIi ( ) :
 I1i = OO000oooo0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30006 ) ,
 background = 'region1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();Check_skins("region")' ,
 nextbuttonfunction = 'self.close();SelectResolution()' ,
 optionbutton1 = iIiiiI1IiI1I1 . getLocalizedString ( 30007 ) ,
 optionbutton2 = iIiiiI1IiI1I1 . getLocalizedString ( 30008 ) ,
 optionbutton3 = iIiiiI1IiI1I1 . getLocalizedString ( 30009 ) ,
 option1function = "doSetRegion()" ,
 option2function = "doSetTZCountry()" ,
 option3function = "doSetTZ()" ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30010 ) ,
 )
 I1i . doModal ( )
 del I1i
 if 71 - 71: OoOO . i1IIi
def o0OooO0ooo0o ( ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30011 ) ,
 background = 'resolution1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectRegion()' ,
 nextbuttonfunction = 'self.close();SelectZoom()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30011 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "RESOLUTION()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30012 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 47 - 47: OoooooooOO
def ii1i1i1IiII ( ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30013 ) ,
 background = 'zoom1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectResolution()' ,
 nextbuttonfunction = 'self.close();SelectWeather()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30014 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin('ActivateWindow(screencalibration)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30015 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 63 - 63: OO0o . OoOooOOOO / II111iiii * oo + iIiIiIiIIi % i1I
def I1 ( ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30016 ) ,
 background = 'weather1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectZoom()' ,
 nextbuttonfunction = 'self.close();InstallLocalContent()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30017 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin(xbmcaddon.Addon(id='weather.yahoo').openSettings(sys.argv[0]))" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30018 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 16 - 16: OO0o - OoooooooOO % iI1
def i11i1iIiii ( ) :
 OOO00OO0oOo = 0
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30020 ) ,
 background = 'skins1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectLanguage()' ,
 nextbuttonfunction = 'self.close();SelectRegion()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30021 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "doSetSkin()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30022 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 35 - 35: OO0o + O0o - iIiIiIiIIi . OO0o . oo
def oo0ooOO ( ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30023 ) ,
 background = 'keywords1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();InstallLocalContent()' ,
 nextbuttonfunction = 'self.close();o0OO0O0Oo()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30024 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "KEYWORD_SEARCH()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30025 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 24 - 24: OoOooOOOO % OoOooOOOO * iIii1I11I1II1
def III ( ) :
 I1i = OO000oooo0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30026 ) ,
 background = 'localcontent1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectWeather()' ,
 nextbuttonfunction = 'self.close();InstallKeyword()' ,
 optionbutton1 = iIiiiI1IiI1I1 . getLocalizedString ( 30027 ) ,
 optionbutton2 = iIiiiI1IiI1I1 . getLocalizedString ( 30028 ) ,
 optionbutton3 = iIiiiI1IiI1I1 . getLocalizedString ( 30029 ) ,
 option1function = "ADDMUSIC()" ,
 option2function = "ADDPHOTOS()" ,
 option3function = "ADDVIDEOS()" ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30030 ) ,
 )
 I1i . doModal ( )
 del I1i
 if 1 - 1: iIiIiIiIIi
def oo00OooO ( mode ) :
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30062 ) ,
 background = 'register.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectLanguage()' ,
 nextbuttonfunction = 'self.close();Get_Activation("check")' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30063 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "self.close();Get_Activation('normal')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30064 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 57 - 57: ooOoo0O + iIii1I11I1II1 % i1IIi % o00oo
def OO0oo ( mode ) :
 if mode == 'check' :
  if IiIi1II11i ( ) :
   II1II1iIIi11 = iIiiiI1IiI1I1 . getLocalizedString ( 30065 )
  else :
   II1II1iIIi11 = iIiiiI1IiI1I1 . getLocalizedString ( 30066 )
 else :
  II1II1iIIi11 = ''
  IiI1iII1II111 = mode
 I1i = II1Ii11I111I (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30062 ) ,
 background = 'register.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30067 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();Oo000()' ,
 nextbuttonfunction = 'self.close();IiIi1II11i()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30068 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "self.close();IiIi1II11i()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30069 ) + IiI1iII1II111 + '[/COLOR]' + II1II1iIIi11 ,
 noconnectionbutton = 'ADDON.getLocalizedString(30019)' ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 28 - 28: OoOO * OoOooOOOO . i1II1I11 % i1II1I11 / i1II1I11 * O0o0Oo
def Oo000 ( ) :
 I1i = II1Ii11I111I (
 header = 'ADDON.getLocalizedString(30067)' ,
 background = 'donotregister.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30070 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30071 ) ,
 backbuttonfunction = 'xbmc.executebuiltin("Skin.SetString(Branding,off)");self.close()' ,
 nextbuttonfunction = 'IiIi1II11i()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30072 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "I11Ii11iI1()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30073 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 64 - 64: II111iiii - o00oo
def O0O0ooOOO ( ) :
 I1i = o0 (
 header = 'Update In Progress' ,
 background = 'register.png' ,
 icon = 'update_software.png' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30074 ) ,
 )
 I1i . doModal ( )
 del I1i
 if 67 - 67: OO0o % OO0o / OO0o
def o0o ( ) :
 if IiIi1II11i ( ) :
  oo00o ( "verify" )
 else :
  oo00OooO ( 'error' )
  if 76 - 76: OO0o
def I11Ii11iI1 ( ) :
 IiIiiI11111I1 ( iIiiiI1IiI1I1 . getLocalizedString ( 30079 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30080 ) )
 if 55 - 55: O0o % OoooooooOO / OoooooooOO % OoooooooOO
def oo00o ( mode ) :
 if mode == 'language' :
  if not os . path . exists ( os . path . join ( Oo0o0000o0o0 , 'resources' , 'skinlist.txt' ) ) :
   iiIi ( )
  else :
   i11i1iIiii ( )
 if mode == 'region' :
  if not os . path . exists ( os . path . join ( Oo0o0000o0o0 , 'resources' , 'skinlist.txt' ) ) :
   O0iIi1IiII ( )
  else :
   i11i1iIiii ( )
   if 52 - 52: iIii1 + iIii1 . II111iiii
def Iii ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(musicfiles,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 6 - 6: ooOoo0O - iIii1 + i1I + i1IIi / O0 / I1iiiiI1iII
def Iiii1I1 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(pictures,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 83 - 83: ooOoo0O . O0o0Oo + iIiIiIiIIi - ooOoo0O * O0o0Oo / O0o0Oo
def I11I1 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(video,files,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 45 - 45: oo
def Ii1Iii111IiI1 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(systemsettings,return)' )
 xbmc . executebuiltin ( 'Action(Right)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 98 - 98: O0o0Oo - OoooooooOO % o00oo + O0 . i1I
def OoOOiIII1I1i1i ( ) :
 o0OIIiI1I1 = ''
 I11I1IIiiII1 = 'http://urlshortbot.com/venztech'
 IIIIIii1ii11 = OOOooo0OooOoO ( iIiiiI1IiI1I1 . getLocalizedString ( 30031 ) )
 o0OIIiI1I1 = I11I1IIiiII1 + IIIIIii1ii11
 if not os . path . exists ( O0OO00o0OO ) :
  os . makedirs ( O0OO00o0OO )
 if IIIIIii1ii11 != '' :
  try :
   Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30032 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30033 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
   downloader . download ( o0OIIiI1I1 , o0oo0o0O00OO )
   Iii1ii1II11i . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30035 ) )
   if zipfile . is_zipfile ( o0oo0o0O00OO ) :
    iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30036 ) , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30037 ) )
   else :
    if os . path . getsize ( o0oo0o0O00OO ) > 100000 :
     Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30038 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30039 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
     os . rename ( o0oo0o0O00OO , i1i1II + '20150815123607.tar' )
     Iii1ii1II11i . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30040 ) )
     Iii1ii1II11i . close ( )
     xbmc . executebuiltin ( 'reboot' )
    else :
     xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
  except :
   xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
   if 91 - 91: iIiIiIiIIi + o00oo
def OOOooo0OooOoO ( searchtext ) :
 OoOooo = ''
 oo00OOoOoO00 = xbmc . Keyboard ( OoOooo , searchtext )
 oo00OOoOoO00 . doModal ( )
 if oo00OOoOoO00 . isConfirmed ( ) :
  OoOooo = oo00OOoOoO00 . getText ( ) . replace ( ' ' , '%20' )
  if OoOooo == None :
   return False
 return OoOooo
 if 15 - 15: oo / O0 . I1iiiiI1iII . i11iIiiIii
def o0OO0O0Oo ( ) :
 if iI111iI == 'skin.confluence' and os . path . exists ( os . path . join ( Oo0o0000o0o0 , 'resources' , 'skinlist.txt' ) ) :
  OOOOO = iIiiiI . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30044 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30045 ) , yeslabel = iIiiiI1IiI1I1 . getLocalizedString ( 30046 ) , nolabel = iIiiiI1IiI1I1 . getLocalizedString ( 30047 ) )
  if OOOOO == 0 :
   i11i1iIiii ( )
 if os . path . exists ( o0oo0o0O00OO ) :
  iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30048 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30049 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30050 ) )
  if zipfile . is_zipfile ( o0oo0o0O00OO ) :
   try :
    Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30051 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30052 ) , ' ' , ' ' )
    extract . all ( o0oo0o0O00OO , Oo00OOOOO , Iii1ii1II11i )
    Iii1ii1II11i . close ( )
    OOoOOo0O00O = os . path . join ( o0oO0 , 'newbuild' )
    if not os . path . exists ( OOoOOo0O00O ) :
     os . makedirs ( OOoOOo0O00O )
   except :
    iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30053 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30054 ) )
  os . remove ( o0oo0o0O00OO )
  iiIii1I ( )
  iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30055 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30056 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30057 ) )
  i1I11iIiII ( )
  if 66 - 66: iI1 - I1iiiiI1iII * oo + OoOO + I1iiiiI1iII - iIii1I11I1II1
  if 17 - 17: iIiIiIiIIi
def i1ii11 ( url ) :
 urllib . urlretrieve ( url , o0oo0o0O00OO )
 if 49 - 49: OoooooooOO / i11iIiiIii * i11iIiiIii
 if 58 - 58: iIiIiIiIIi
def IiIIi1IiiI1 ( url , video ) :
 global oo0o0O00
 global endtime
 oo0o0O00 = threading . Thread ( target = i1ii11 , args = [ url ] )
 oO00oOo0OOO = threading . Thread ( target = O0O0ooOOO )
 try :
  oo0o0O00 . start ( )
  ii1 = datetime . datetime . now ( )
  print "###Download Started"
 except :
  iIiiiI . ok ( 'Error' , 'Unable to download updates from server. Please try opening a web browser on your PC to make sure your internet is working correctly. Click OK to try again.' )
  return
 try :
  yt . PlayVideo ( video )
 except :
  pass
 while xbmc . Player ( ) . isPlaying ( ) :
  xbmc . sleep ( 500 )
 oO00oOo0OOO . start ( )
 while oo0o0O00 . isAlive ( ) :
  xbmc . sleep ( 500 )
 endtime = datetime . datetime . fromtimestamp ( os . path . getmtime ( o0oo0o0O00OO ) )
 ooO = endtime - ii1
 oOoOoO000OO = os . path . getsize ( o0oo0o0O00OO ) / ( 128 * 1024.0 )
 ooO = str ( ooO ) . replace ( ':' , '' )
 ii11II11 = oOoOoO000OO / float ( ooO )
 oOo = open ( Oo0oO0ooo , mode = 'w+' )
 oOo . write ( str ( ii11II11 ) )
 oOo . close ( )
 if 86 - 86: OoOooOOOO * OoooooooOO
 if os . path . exists ( o0oo0o0O00OO ) and zipfile . is_zipfile ( o0oo0o0O00OO ) :
  OooO0oOo = zipfile . ZipFile ( o0oo0o0O00OO , 'r' )
  OooO0oOo . extractall ( Oo00OOOOO )
  try :
   os . remove ( o0oo0o0O00OO )
  except :
   print "### Failed to remove temp file"
  iiIii1I ( )
  if not os . path . exists ( o00 ) :
   os . makedirs ( o00 )
  print "### Removed textures"
  i1I11iIiII ( )
  if 66 - 66: OoOooOOOO * iI1
def IiIi1II11i ( ) :
 if 28 - 28: OoOooOOOO % OoOO % iIii1 + o00oo / o00oo
 I11I1IIiiII1 = ''
 OO0O0ooOOO00 = ''
 IiIiiiiI1 = OO00OOoO0o ( )
 if '~' in IiIiiiiI1 :
  I11I1IIiiII1 , OO0O0ooOOO00 = IiIiiiiI1 . split ( '~' )
  I11I1IIiiII1 = Iiiiiii1 ( 'd' , I11I1IIiiII1 )
  OO0O0ooOOO00 = Iiiiiii1 ( 'd' , OO0O0ooOOO00 )
 else :
  try :
   I11I1IIiiII1 = Iiiiiii1 ( 'd' , IiIiiiiI1 )
  except :
   pass
   if 78 - 78: iIii1 + i1II1I11 - O0
 if I11I1IIiiII1 == Iiiiiii1 ( 'd' , '595d515c110b0d1804' ) :
  i1I1iIi1IiI = 'quit'
  if 11 - 11: II111iiii
  if 95 - 95: oo * iIii1 % O0o % i1I - i1I
 if Iiiiiii1 ( 'd' , '5b6767632d2222675f555521605804060d1006' ) in I11I1IIiiII1 :
  if '~' in IiIiiiiI1 and not os . path . exists ( xbmc . translatePath ( os . path . join ( o0oO0 , 'media' , 'branding' ) ) ) :
   try :
    xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
    urllib . urlretrieve ( OO0O0ooOOO00 , o0oo0o0O00OO )
    xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
   except :
    pass
   if os . path . exists ( o0oo0o0O00OO ) and zipfile . is_zipfile ( o0oo0o0O00OO ) :
    OooO0oOo = zipfile . ZipFile ( o0oo0o0O00OO , 'r' )
    OooO0oOo . extractall ( Oo00OOOOO )
    OooO0oOo . close ( )
    try :
     os . remove ( o0oo0o0O00OO )
    except :
     pass
  OO0oo ( I11I1IIiiII1 )
  if 97 - 97: iIii1 + iIii1I11I1II1 . O0
  if 64 - 64: i1IIi % O0o / i11iIiiIii - i1IIi % ooOoo0O . OO0o
 elif Iiiiiii1 ( 'd' , '5e6a6a663025250b1c0a0506' ) in I11I1IIiiII1 :
  IiIIi1IiiI1 ( I11I1IIiiII1 , OO0O0ooOOO00 )
  if 8 - 8: iI1 + II111iiii * ooOoo0O * OoOO * i1II1I11 / oo
  if 21 - 21: iIiIiIiIIi / OoooooooOO
 elif IiIiiiiI1 == 'back' :
  try :
   shutil . rmtree ( o0oOoO00o )
  except :
   pass
  xbmc . executebuiltin ( 'reboot' )
  if 11 - 11: ooOoo0O % i1I - i11iIiiIii - iIiIiIiIIi + O0o + oo
  if 87 - 87: O0o0Oo * i1IIi / iIii1
def i1I11iIiII ( ) :
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  try :
   os . system ( 'killall -9 XBMC' )
  except :
   pass
  try :
   os . system ( 'killall -9 Kodi' )
  except :
   pass
 else :
  if 6 - 6: I1iiiiI1iII + iI1 - OoooooooOO % ooOoo0O * OoOO
  try :
   os . system ( 'killall XBMC' )
  except :
   pass
  try :
   os . system ( 'killall Kodi' )
  except :
   pass
  try :
   os . system ( 'killall -9 xbmc.bin' )
  except :
   pass
  try :
   os . system ( 'killall -9 kodi.bin' )
  except :
   pass
   if 69 - 69: i1IIi
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 59 - 59: II111iiii - I1iiiiI1iII
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
  iIiiiI . ok ( 'Attempting to use advanced task killer apk' , 'If you have the advanced task killer apk installed please click the big button at the top which says "KILL selected apps". Click "OK" then "Kill selected apps. Please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
  try :
   xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
  except :
   pass
   if 24 - 24: iI1 - i1IIi + i1II1I11
def iiIii1I ( ) :
 IiiIi = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  iIIi = database . connect ( IiiIi )
  ooO00O00oOO = iIIi . cursor ( )
  ooO00O00oOO . execute ( "DROP TABLE IF EXISTS path" )
  ooO00O00oOO . execute ( "VACUUM" )
  iIIi . commit ( )
  ooO00O00oOO . execute ( "DROP TABLE IF EXISTS sizes" )
  ooO00O00oOO . execute ( "VACUUM" )
  iIIi . commit ( )
  ooO00O00oOO . execute ( "DROP TABLE IF EXISTS texture" )
  ooO00O00oOO . execute ( "VACUUM" )
  iIIi . commit ( )
  ooO00O00oOO . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  iIIi . commit ( )
  ooO00O00oOO . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  iIIi . commit ( )
  ooO00O00oOO . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  iIIi . commit ( )
 except :
  pass
 shutil . rmtree ( I1i1iiI1 )
 if 40 - 40: OO0o . iIiIiIiIIi + o00oo + iIii1 + O0o0Oo
def i11Ii1I1I11I ( ) :
 iIii1I111I11I = str ( oOo0oooo00o [ : 2 ] )
 if iIii1I111I11I < 14 :
  Ii1 = os . path . join ( i11 , 'xbmc.log' )
  if 34 - 34: OO0o - OoooooooOO . o00oo / II111iiii
 else :
  Ii1 = os . path . join ( i11 , 'kodi.log' )
  if 27 - 27: OoOooOOOO / iI1 * O0o - OoOooOOOO
 iI11iiii1I = open ( Ii1 , 'r' )
 iiiiI1iiiIi = iI11iiii1I . read ( )
 iI11iiii1I . close ( )
 if 84 - 84: ooOoo0O
 o0OoO00 = re . compile ( 'Host CPU: (.+?) available' ) . findall ( iiiiI1iiiIi )
 IIIIIiII1 = o0OoO00 [ 0 ] if ( len ( o0OoO00 ) > 0 ) else ''
 return IIIIIiII1 . replace ( ' ' , '%20' )
 if 45 - 45: o00oo / OO0o . OO0o
 if 35 - 35: O0o0Oo . OoOO * i11iIiiIii
def iiII ( ) :
 iIii1I111I11I = str ( oOo0oooo00o [ : 2 ] )
 if iIii1I111I11I < 14 :
  Ii1 = os . path . join ( i11 , 'xbmc.log' )
  if 57 - 57: i1II1I11 . iI1 + II111iiii
 else :
  Ii1 = os . path . join ( i11 , 'kodi.log' )
  if 43 - 43: O0o0Oo % OO0o
 iI11iiii1I = open ( Ii1 , 'r' )
 iiiiI1iiiIi = iI11iiii1I . read ( )
 iI11iiii1I . close ( )
 if 69 - 69: OO0o % OoOooOOOO
 oOOoO = re . compile ( 'Running on (.+?)\n' ) . findall ( iiiiI1iiiIi )
 iI = oOOoO [ 0 ] if ( len ( oOOoO ) > 0 ) else ''
 return iI . replace ( ' ' , '%20' )
 if 19 - 19: II111iiii
 if 72 - 72: OoooooooOO / o00oo + i1I / OoOO * i1I
def Ii1iIi111i1i1 ( protocol ) :
 if sys . platform == 'win32' :
  for ii1ii1ii in os . popen ( "ipconfig /all" ) :
   if ii1ii1ii . lstrip ( ) . startswith ( 'Physical Address' ) :
    IIOO0ooOo0OoOo0 = ii1ii1ii . split ( ':' ) [ 1 ] . strip ( ) . replace ( '-' , ':' )
    break
    if 87 - 87: iIiIiIiIIi . o00oo
 if xbmc . getCondVisibility ( 'System.Platform.Android' ) :
  if protcol == 'wifi' :
   i1i = open ( '/sys/class/net/wlan0/address' , mode = 'r' )
  else :
   i1i = open ( '/sys/class/net/eth0/address' , mode = 'r' )
  IIOO0ooOo0OoOo0 = i1i . read ( )
  IIOO0ooOo0OoOo0 = IIOO0ooOo0OoOo0 [ : 17 ]
  i1i . close ( )
  if 5 - 5: iIii1 + O0 + O0 . O0o0Oo - O0o
 else :
  if protocol == 'wifi' :
   for ii1ii1ii in os . popen ( "/sbin/ifconfig" ) :
    if ii1ii1ii . find ( 'wlan0' ) > - 1 :
     IIOO0ooOo0OoOo0 = ii1ii1ii . split ( ) [ 4 ]
     break
  else :
   for ii1ii1ii in os . popen ( "/sbin/ifconfig" ) :
    if ii1ii1ii . find ( 'eth0' ) > - 1 :
     IIOO0ooOo0OoOo0 = ii1ii1ii . split ( ) [ 4 ]
     break
 return str ( IIOO0ooOo0OoOo0 )
 if 63 - 63: iIiIiIiIIi
def IiIiiI11111I1 ( heading , anounce ) :
 class Oo0 ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try :
    IiI11iII1 = open ( anounce ) ; o0OOoo0OO0OOO = IiI11iII1 . read ( )
   except :
    o0OOoo0OO0OOO = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( o0OOoo0OO0OOO ) )
   return
 Oo0 ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  xbmc . sleep ( 500 )
  if 79 - 79: OoOooOOOO % ooOoo0O / iIii1I11I1II1 + OoOO * OoOooOOOO
def OO00OOoO0o ( ) :
 IiI1 = 0
 IIiiiiIiIIii = 0
 try :
  O0OO = Ii1iIi111i1i1 ( 'wifi' )
 except :
  O0OO = 'Unknown'
 try :
  IIIiIiI = Ii1iIi111i1i1 ( 'eth0' )
 except :
  IIIiIiI = 'Unknown'
 try :
  I1ii1II1iII = i11Ii1I1I11I ( )
 except :
  I1ii1II1iII = 'Unknown'
 try :
  II1i = iiII ( )
 except :
  II1i = 'Unknown'
 o0OO00oo = O0OO + '&' + I1ii1II1iII + '&' + II1i + '&' + IIIiIiI . replace ( ' ' , '%20' )
 while IiI1 < 3 and IIiiiiIiIIii == 0 :
  try :
   IiI1 += 1
   i1i1IiIiIi1Ii = oO0ooOO ( Iiiiiii1 ( 'd' , '4a5656521c1111564e4444104f471123464610524a52215a1f0e16141e04' ) + Iiiiiii1 ( 'e' , o0OO00oo ) )
   IIiiiiIiIIii = 1
  except :
   iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30076 ) )
 if IIiiiiIiIIii == 1 :
  return i1i1IiIiIi1Ii
 else :
  OOOOO = iIiiiI . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30077 ) )
  if OOOOO == 1 :
   iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30078 ) )
   try :
    shutil . rmtree ( o0oOoO00o )
   except :
    pass
   return '595d515c110b0d1804'
  else :
   return 'back'
   if 16 - 16: iI1 + O0o / iI1 / OoOooOOOO % iIiIiIiIIi % iIii1
def oO0ooOO ( url ) :
 Ii1II11II1iii = urllib2 . Request ( url )
 Ii1II11II1iii . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 oO0Oo = urllib2 . urlopen ( Ii1II11II1iii )
 i1i1IiIiIi1Ii = oO0Oo . read ( )
 oO0Oo . close ( )
 return i1i1IiIiIi1Ii . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 if 86 - 86: OO0o
def Iiiiiii1 ( mode , message ) :
 if mode == 'e' :
  import random
  oO0ooOoO = 0
  ooO0000o00O = ''
  while oO0ooOoO < 4 :
   oO0ooOoO += 1
   O0Ooo = random . randrange ( 1 , 31 )
   oO00oOOo0Oo = hex ( O0Ooo ) [ 2 : ]
   if len ( oO00oOOo0Oo ) == 1 :
    oO00oOOo0Oo = '0' + oO00oOOo0Oo
   ooO0000o00O = ooO0000o00O + oO00oOOo0Oo
  IIi = random . randrange ( 1 , 4 )
  if IIi == 1 : ooO0000o00O = ooO0000o00O + '0A'
  if IIi == 2 : ooO0000o00O = ooO0000o00O + '04'
  if IIi == 3 : ooO0000o00O = ooO0000o00O + '06'
  if IIi == 4 : ooO0000o00O = ooO0000o00O + '08'
  IIIIii = ooO0000o00O [ - 2 : ]
  iIiI1 = int ( IIIIii , 16 )
  iIIiI1ii = ooO0000o00O [ - iIiI1 : - ( iIiI1 - 2 ) ]
  oo0OOoOoo0O0O = - int ( iIIiI1ii , 16 )
  if 15 - 15: OO0o
  if 20 - 20: oo % O0 . O0o0Oo
  Oo0oOooOoOo = ''
  I1iOo = ''
  for IiIiIi1I1 in message :
   IiI1ii1Ii = ord ( IiIiIi1I1 )
   oooOOOoOOOo0O = int ( IiI1ii1Ii ) + oo0OOoOoo0O0O
   O00oOoo0OoO0 = hex ( oooOOOoOOOo0O ) [ 2 : ]
   if len ( O00oOoo0OoO0 ) == 1 :
    O00oOoo0OoO0 = '0' + O00oOoo0OoO0
   I1iOo = str ( I1iOo ) + str ( O00oOoo0OoO0 )
  return I1iOo + ooO0000o00O
 else :
  IIIIii = message [ - 2 : ]
  iIiI1 = int ( IIIIii , 16 )
  iIIiI1ii = message [ - iIiI1 : - ( iIiI1 - 2 ) ]
  oo0OOoOoo0O0O = int ( iIIiI1ii , 16 )
  message = message [ : - 10 ]
  Ooo0 = [ message [ oooO00o0 : oooO00o0 + 2 ] for oooO00o0 in range ( 0 , len ( message ) , 2 ) ]
  o0o00oO0oo000 = [ int ( oO000o , 16 ) + oo0OOoOoo0O0O for oO000o in Ooo0 ]
  o0Oo = [ str ( unichr ( oO000o ) ) for oO000o in o0o00oO0oo000 ]
  ooO0000o00O = '' . join ( o0Oo )
  return ooO0000o00O . encode ( 'utf-8' )
  if 57 - 57: ooOoo0O / iI1
  if 69 - 69: iIiIiIiIIi - iI1 % oo
ii1i = binascii . unhexlify ( '6164646f6e2e786d6c' )
i11i111IiI = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , ii1i ) )
i1i1II11II1 = open ( i11i111IiI , mode = 'r' )
O0OoO000O0OO = file . read ( i1i1II11II1 )
file . close ( i1i1II11II1 )
II1IIIii = re . compile ( '<ref>(.+?)</ref>' ) . findall ( O0OoO000O0OO )
iIIIiIi1I1i = II1IIIii [ 0 ] if ( len ( II1IIIii ) > 0 ) else ''
OoOOoO0oOo = hashlib . md5 ( open ( o0OOO , 'rb' ) . read ( ) ) . hexdigest ( )
if iIIIiIi1I1i != OoOOoO0oOo :
 try :
  os . remove ( o0OOO )
 except :
  pass
  if 70 - 70: i1II1I11 % iIii1I11I1II1 . iI1 + iI1 - I1iiiiI1iII % O0o0Oo
i1I1iIi1IiI = None
if i1I1iIi1IiI == None :
 if os . path . exists ( o0oo0o0O00OO ) :
  os . remove ( o0oo0o0O00OO )
 IiIi1II11i ( )
 if 38 - 38: O0o0Oo % ooOoo0O - OoooooooOO
elif i1I1iIi1IiI == 'quit' :
 xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
 xbmc . executebuiltin ( 'StopScript(script.openwindow)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')