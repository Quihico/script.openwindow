import base64;exec base64.b64decode('#
#       Copyright (C) 2015
#       Json Edits and Various tweaks by OpenELEQ (OpenELEQ@gmail.com)
#       Based on original work by:
#       Lee Randall (info@totalrevolution.tv)
#
#  This software is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License
#  You can find a copy of the license in the add-on folder
if 64 - 64: i11iIiiIii
import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon , os , sys , time , xbmcvfs , datetime , zipfile , shutil , binascii , hashlib
import downloader
import extract
import yt
import threading
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
try :
 import json as simplejson
except :
 import simplejson
 if 73 - 73: II111iiii
IiII1IiiIiI1 = 'script.openwindow'
iIiiiI1IiI1I1 = xbmcaddon . Addon ( IiII1IiiIiI1 )
o0OoOoOO00 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , '' ) )
I11i = xbmcaddon . Addon ( 'script.openwindow' ) . getAddonInfo ( "path" )
O0O = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'language' ) )
Oo = 7
I1ii11iIi11i = 10
I1IiI = 7
o0OOO = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , 'default.py' ) )
iIiiiI = xbmcgui . Dialog ( )
Iii1ii1II11i = xbmcgui . DialogProgress ( )
iI111iI = xbmc . getSkinDir ( )
IiII = 0.0
iI1Ii11111iIi = 0.0
i1i1II = '/storage/.restore/'
O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
I1i1iiI1 = xbmc . translatePath ( os . path . join ( 'special://home' , 'userdata' , 'Thumbnails' ) )
iiIIIII1i1iI = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , 'packages' , '' ) )
o0oO0 = xbmc . translatePath ( 'special://home/' )
oo00 = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' )
o00 = xbmc . translatePath ( 'special://xbmc/' )
Oo0oO0ooo = xbmc . translatePath ( 'special://home/media/branding/branding_update.png' )
o0oOoO00o = xbmc . getIPAddress ( )
i1 = xbmc . translatePath ( 'special://logpath/' )
oOOoo00O0O = xbmc . translatePath ( os . path . join ( o0oO0 , 'debug.txt' ) )
i1111 = xbmc . translatePath ( 'special://home/addons/script.openwindow/' )
i11 = xbmc . getInfoLabel ( "System.BuildVersion" )
I11 = ''
Oo0o0000o0o0 = ''
if 86 - 86: iiiii11iII1 % O0o
if not os . path . exists ( i1111 ) :
 i1111 = xbmc . translatePath ( 'special://xbmc/addons/script.openwindow/' )
 if 97 - 97: IIIII . I1
def O0OoOoo00o ( ) :
 i11 = xbmc . getInfoLabel ( "System.BuildVersion" )
 iiiI11 = float ( i11 [ : 4 ] )
 if iiiI11 < 14 :
  OOooO = os . path . join ( i1 , 'xbmc.log' )
 else :
  OOooO = os . path . join ( i1 , 'kodi.log' )
  if 58 - 58: i11iiII + OooooO0oOO + oOo0 / oo0Ooo0
 try :
  I1I11I1I1I = open ( OOooO , mode = 'r' )
  OooO0OO = I1I11I1I1I . read ( )
  I1I11I1I1I . close ( )
 except :
  try :
   I1I11I1I1I = open ( os . path . join ( o0oO0 , 'temp' , 'kodi.log' ) , mode = 'r' )
   OooO0OO = I1I11I1I1I . read ( )
   I1I11I1I1I . close ( )
  except :
   try :
    I1I11I1I1I = open ( os . path . join ( o0oO0 , 'temp' , 'xbmc.log' ) , mode = 'r' )
    OooO0OO = I1I11I1I1I . read ( )
    I1I11I1I1I . close ( )
   except :
    pass
    if 28 - 28: iIii1
 if 'OpenELEC' in OooO0OO :
  return True
  if 71 - 71: IiI1I1
if O0OoOoo00o ( ) :
 OoO000 = '/storage'
 IIiiIiI1 = '/storage/downloads'
 if not os . path . exists ( i1i1II ) :
  os . makedirs ( i1i1II )
else :
 OoO000 = o0oO0
 IIiiIiI1 = xbmc . translatePath ( os . path . join ( 'special://home' , '..' , 'temp_download' ) )
 if 41 - 41: iiIIiIiIi
i1I11 = os . path . join ( IIiiIiI1 , 'target.zip' )
if not os . path . exists ( IIiiIiI1 ) :
 os . makedirs ( IIiiIiI1 )
 if 26 - 26: III1I11iiii1I
 if 22 - 22: Ii11iii11I % Ii11Ii11I % O0o + iiiii11iII1 - iiIIiIiIi
if not os . path . exists ( iiIIIII1i1iI ) :
 os . makedirs ( iiIIIII1i1iI )
 if 83 - 83: Ii11Ii11I
 if 64 - 64: IIIII % Ii11Ii11I % iiIIiIiIi / I1 - IIIII
def o0o0oOOOo0oo ( cmd ) :
 o0oo0o0O00OO ( cmd )
 xbmc . executebuiltin ( cmd )
 if 80 - 80: i1IIi
 if 70 - 70: I1 - i11iiII
def o0oo0o0O00OO ( text ) :
 try :
  I1iii = '%s : %s' % ( IiII1IiiIiI1 , str ( text ) )
  xbmc . log ( I1iii , xbmc . LOGDEBUG )
 except :
  pass
  if 20 - 20: i11iiII
  if 77 - 77: I1 / iIii1
def Ooooo ( what , filelocation ) :
 I1I1i = open ( filelocation , "w" )
 I1I1i . write ( what )
 I1I1i . close ( )
 if 87 - 87: OooooO0oOO * IIIII + OoooooooOO
 if 6 - 6: iiIIiIiIi + O0 + O0 - OooooO0oOO . Ii11Ii11I / iIii1I11I1II1
def OoOOO00oOO0 ( setting , value ) :
 setting = '"%s"' % setting
 if 95 - 95: oo0Ooo0 / OoooooooOO
 if isinstance ( value , list ) :
  iI = ''
  for o00O in value :
   iI += '"%s",' % str ( o00O )
   if 69 - 69: oOo0 % Ii11iii11I - i11iiII + Ii11iii11I - O0 % OoooooooOO
  iI = iI [ : - 1 ]
  iI = '[%s]' % iI
  value = iI
  if 31 - 31: II111iiii - oo0Ooo0 . Ii11iii11I % I1 - O0
 elif not isinstance ( value , int ) :
  value = '"%s"' % value
  if 4 - 4: II111iiii / Ii11Ii11I . iiIIiIiIi
 O0oo0OO0oOOOo = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":%s,"value":%s}, "id":1}' % ( setting , value )
 o0oo0o0O00OO ( O0oo0OO0oOOOo )
 i1i1i11IIi = xbmc . executeJSONRPC ( O0oo0OO0oOOOo )
 o0oo0o0O00OO ( i1i1i11IIi )
 if 33 - 33: i11iiII + oo0Ooo0 * IIIII - O0o / oOo0 % IiI1I1
 if 21 - 21: IIIII * iIii1I11I1II1 % oOo0 * i1IIi
def Ii11Ii1I ( setting ) :
 try :
  setting = '"%s"' % setting
  if 72 - 72: iiIIiIiIi / i1IIi * O0o - Ii11iii11I
  O0oo0OO0oOOOo = '{"jsonrpc":"2.0", "method":"Settings.GetSettingValue","params":{"setting":%s}, "id":1}' % ( setting )
  o0oo0o0O00OO ( O0oo0OO0oOOOo )
  i1i1i11IIi = xbmc . executeJSONRPC ( O0oo0OO0oOOOo )
  o0oo0o0O00OO ( i1i1i11IIi )
  if 51 - 51: II111iiii * IIIII % i11iiII * II111iiii % OooooO0oOO / Ii11Ii11I
  i1i1i11IIi = simplejson . loads ( i1i1i11IIi )
  if 49 - 49: i11iiII
  if i1i1i11IIi . has_key ( 'result' ) :
   if i1i1i11IIi [ 'result' ] . has_key ( 'value' ) :
    return i1i1i11IIi [ 'result' ] [ 'value' ]
 except :
  pass
  if 35 - 35: I1 - OoooooooOO / OooooO0oOO % i1IIi
 return None
 if 78 - 78: iIii1
 if 71 - 71: oo0Ooo0 + Ii11Ii11I % i11iIiiIii + OooooO0oOO - III1I11iiii1I
def oO0OOoO0 ( language ) :
 file = xbmc . translatePath ( os . path . join ( O0O , language , 'langinfo.xml' ) )
 if 34 - 34: III1I11iiii1I - III1I11iiii1I * iiiii11iII1 + IiI1I1 % III1I11iiii1I
 try :
  i111IiI1I = open ( file , 'r' )
  iI = i111IiI1I . read ( )
  i111IiI1I . close ( )
 except :
  return None
  if 70 - 70: IiI1I1 . O0o / i11iiII . IiI1I1 - O0 / III1I11iiii1I
 iI = iI . replace ( ' =' , '=' )
 iI = iI . replace ( '= ' , '=' )
 iI = iI . replace ( ' = ' , '=' )
 if 62 - 62: iIii1I11I1II1 * I1
 return iI
 if 26 - 26: iiIIiIiIi . Ii11iii11I
 if 68 - 68: IIIII
def IIi1iIIiI ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'languagelist.txt' ) )
 if 58 - 58: Ii11Ii11I / II111iiii - oo0Ooo0 - i11iIiiIii % I1 - Ii11iii11I
 IIII11I1I = [ ]
 if 91 - 91: IIIII / iIii1 - II111iiii . iIii1
 try :
  i111IiI1I = open ( file , 'r' )
  i1I11i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return IIII11I1I
  if 81 - 81: iIii1I11I1II1 + iIii1I11I1II1 * III1I11iiii1I * Ii11Ii11I % Ii11Ii11I
 for ooOO00O00oo in i1I11i1I :
  if ooOO00O00oo . startswith ( '#' ) :
   continue
  I1ii11iI = ooOO00O00oo . split ( '\t' )
  if len ( I1ii11iI ) < 6 :
   continue
   if 14 - 14: I1 / III1I11iiii1I . I1 . iIii1 % IIIII * iIii1
  iII = I1ii11iI [ 0 ]
  oO00o0 = I1ii11iI [ 1 ]
  dir = I1ii11iI [ 2 ]
  OOoo0O = I1ii11iI [ 3 ]
  Oo0ooOo0o = I1ii11iI [ 4 ]
  Ii1i1 = I1ii11iI [ 5 ] . replace ( '\n' , '' )
  IIII11I1I . append ( [ iII , oO00o0 , dir , OOoo0O , Oo0ooOo0o ] )
  if 15 - 15: II111iiii
 IIII11I1I = sorted ( IIII11I1I )
 return IIII11I1I
 if 18 - 18: i11iIiiIii . i1IIi % OoooooooOO / O0
 if 75 - 75: I1 % i11iiII % i11iiII . Ii11iii11I
def III1iII1I1ii ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'skinlist.txt' ) )
 if 61 - 61: II111iiii
 O0OOO = [ ]
 if 10 - 10: oo0Ooo0 * iIii1 % I1 / iiiii11iII1 / I1
 try :
  i111IiI1I = open ( file , 'r' )
  i1I11i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return O0OOO
  if 42 - 42: IIIII
 for ooOO00O00oo in i1I11i1I :
  if ooOO00O00oo . startswith ( '#' ) :
   continue
  I1ii11iI = ooOO00O00oo . split ( '\t' )
  if len ( I1ii11iI ) < 4 :
   continue
   if 67 - 67: Ii11iii11I . iiIIiIiIi . O0
  iI111iI = I1ii11iI [ 0 ]
  IIIIiiII111 = I1ii11iI [ 1 ]
  id = I1ii11iI [ 2 ]
  OOoOoo = I1ii11iI [ 3 ]
  oO0000OOo00 = I1ii11iI [ 4 ]
  O0OOO . append ( [ iI111iI , IIIIiiII111 , id , OOoOoo , oO0000OOo00 ] )
 return O0OOO
 if 27 - 27: iiiii11iII1 % iiiii11iII1
 if 1 - 1: IIIII - oOo0 . iIii1 . IIIII / O0o + iIii1
def Ooo ( ) :
 file = '/usr/share/zoneinfo/iso3166.tab'
 if 62 - 62: oo0Ooo0 / IIIII + IiI1I1 / IIIII . II111iiii
 IIII11I1I = [ ]
 if 68 - 68: i11iIiiIii % OooooO0oOO + i11iIiiIii
 try :
  i111IiI1I = open ( file , 'r' )
  i1I11i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return IIII11I1I
  if 31 - 31: II111iiii . iiiii11iII1
 for ooOO00O00oo in i1I11i1I :
  if ooOO00O00oo . startswith ( '#' ) :
   continue
  I1ii11iI = ooOO00O00oo . split ( '\t' )
  if len ( I1ii11iI ) < 2 :
   continue
   if 1 - 1: O0o / i11iiII % iiIIiIiIi * III1I11iiii1I . i11iIiiIii
  III1Iiii1I11 = I1ii11iI [ 0 ]
  iII = I1ii11iI [ 1 ] . replace ( '\n' , '' )
  IIII11I1I . append ( [ iII , III1Iiii1I11 ] )
  if 9 - 9: OooooO0oOO / O0o - iiiii11iII1 / OoooooooOO / iIii1I11I1II1 - i11iiII
 IIII11I1I = sorted ( IIII11I1I )
 return IIII11I1I
 if 91 - 91: iiIIiIiIi % i1IIi % iIii1I11I1II1
 if 20 - 20: oo0Ooo0 % IiI1I1 / IiI1I1 + IiI1I1
def III1IiiI ( theCode ) :
 file = '/usr/share/zoneinfo/zone.tab'
 if 31 - 31: i11iiII . iiiii11iII1
 ii11IIII11I = [ ]
 if 81 - 81: I1 / O0 . III1I11iiii1I . iiiii11iII1
 try :
  i111IiI1I = open ( file , 'r' )
  i1I11i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return ii11IIII11I
  if 72 - 72: i1IIi / IIIII + OoooooooOO - O0o
 for ooOO00O00oo in i1I11i1I :
  if ooOO00O00oo . startswith ( '#' ) :
   continue
  I1ii11iI = ooOO00O00oo . split ( '\t' )
  if len ( I1ii11iI ) < 3 :
   continue
   if 29 - 29: OooooO0oOO + oOo0 % O0
  III1Iiii1I11 = I1ii11iI [ 0 ]
  I1I11 = I1ii11iI [ 1 ]
  II1 = I1ii11iI [ 2 ] . replace ( '\n' , '' )
  if 70 - 70: Ii11iii11I - O0o / IiI1I1
  if III1Iiii1I11 != theCode :
   if len ( ii11IIII11I ) > 0 :
    if 82 - 82: iIii1 % i11iiII % IIIII - O0o + OoooooooOO
    break
  else :
   ii11IIII11I . append ( II1 )
   if 22 - 22: i1IIi + O0 . iIii1I11I1II1 * iiIIiIiIi % i11iIiiIii * iiiii11iII1
 ii11IIII11I = sorted ( ii11IIII11I )
 return ii11IIII11I
 if 77 - 77: O0o
 if 17 - 17: iiIIiIiIi % IIIII . oo0Ooo0 + IIIII / II111iiii
def oo0O0O00 ( ) :
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'charset.txt' ) )
 if 47 - 47: i11iiII + Ii11Ii11I
 OoO = xbmc . getLocalizedString ( 13278 )
 if 88 - 88: iiIIiIiIi . II111iiii * II111iiii % Ii11iii11I
 iiIIiiIi1Ii11 = [ ]
 try :
  i111IiI1I = open ( file , 'r' )
  i1I11i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return iiIIiiIi1Ii11
  if 65 - 65: II111iiii . oo0Ooo0 % iIii1 . i11iIiiIii + O0
 for ooOO00O00oo in i1I11i1I :
  ooOO00O00oo = ooOO00O00oo . replace ( '"' , '' )
  ooOO00O00oo = ooOO00O00oo . replace ( '\r' , '' )
  ooOO00O00oo = ooOO00O00oo . replace ( '\n' , '' )
  ooOO00O00oo = ooOO00O00oo . split ( ',' )
  if len ( ooOO00O00oo ) < 2 :
   continue
   if 26 - 26: iIii1 - iIii1I11I1II1 - iiiii11iII1 / IIIII . I1 % iIii1I11I1II1
  iiIIiiIi1Ii11 . append ( [ ooOO00O00oo [ 1 ] . strip ( ) , ooOO00O00oo [ 0 ] . strip ( ) ] )
  if 91 - 91: i11iiII . iIii1I11I1II1 / oOo0 + i1IIi
 iiIIiiIi1Ii11 = sorted ( iiIIiiIi1Ii11 )
 iiIIiiIi1Ii11 . insert ( 0 , [ OoO , 'DEFAULT' ] )
 return iiIIiiIi1Ii11
 if 42 - 42: Ii11Ii11I . i11iiII . Ii11Ii11I - OooooO0oOO
 if 40 - 40: Ii11Ii11I - i11iIiiIii / IiI1I1
def I11iiI1i1 ( ) :
 import select
 I1i1Iiiii = [ ]
 if 94 - 94: i11iiII * IiI1I1 / O0o / IiI1I1
 oO0 = 'subtitles.charset'
 OoO = xbmc . getLocalizedString ( 13278 )
 if 75 - 75: Ii11Ii11I + I1 + i11iiII * iIii1 % oOo0 . iiIIiIiIi
 iiIIiiIi1Ii11 = oo0O0O00 ( )
 if 55 - 55: oo0Ooo0 . iiiii11iII1
 if len ( iiIIiiIi1Ii11 ) == 0 :
  return
  if 61 - 61: O0o % III1I11iiii1I . O0o
 for o0oOO000oO0oo , oOO00O in enumerate ( iiIIiiIi1Ii11 ) :
  I1i1Iiiii . append ( [ oOO00O [ 0 ] , o0oOO000oO0oo ] )
  if 77 - 77: O0o - i1IIi - iIii1 . I1
 IiI1i = Ii11Ii1I ( oO0 )
 if 92 - 92: III1I11iiii1I . III1I11iiii1I + IIIII
 for oOO00O in iiIIiiIi1Ii11 :
  if IiI1i == oOO00O [ 1 ] :
   IiI1i = oOO00O [ 0 ]
   break
   if 9 - 9: iiiii11iII1 * O0 + III1I11iiii1I - iIii1 * Ii11iii11I
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 31380 ) , I1i1Iiiii , IiI1i )
 if 81 - 81: O0 - Ii11Ii11I / i11iiII % IiI1I1
 if Oooo0oOO < 0 :
  return
  if 83 - 83: Ii11Ii11I
 oO00Oo0O0o = iiIIiiIi1Ii11 [ Oooo0oOO ] [ 0 ]
 if 13 - 13: OoooooooOO
 if oO00Oo0O0o == IiI1i :
  return
  if 33 - 33: Ii11iii11I + iiIIiIiIi * oOo0 / iIii1I11I1II1 - iiiii11iII1
 oOO00O = iiIIiiIi1Ii11 [ Oooo0oOO ] [ 1 ]
 if 54 - 54: Ii11iii11I / oo0Ooo0 . oOo0 % iiIIiIiIi
 if oOO00O == IiI1i :
  return
  if 57 - 57: i11iIiiIii . OooooO0oOO - IiI1I1 - oOo0 + I1
 OoOOO00oOO0 ( oO0 , oOO00O )
 o0o0oOOOo0oo ( 'Skin.SetBool(SubtitleCharsetSet)' )
 xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( oO0 , oO00Oo0O0o ) )
 if 63 - 63: I1 * iiIIiIiIi
 if 69 - 69: O0 . IIIII
def ii1111iII ( ) :
 import select
 I1i1Iiiii = [ ]
 if 32 - 32: i1IIi / II111iiii . O0o
 oO0 = 'locale.timezone'
 if 62 - 62: OoooooooOO * iiiii11iII1
 III1Iiii1I11 = '??'
 IIII11I1I = Ooo ( )
 iII = Ii11Ii1I ( 'locale.timezonecountry' )
 if 58 - 58: I1 % i11iiII
 for o00O in IIII11I1I :
  if iII . lower ( ) == o00O [ 0 ] . lower ( ) :
   III1Iiii1I11 = o00O [ 1 ]
   break
   if 50 - 50: Ii11iii11I . i11iiII
 ooO0OO = III1IiiI ( III1Iiii1I11 )
 if 54 - 54: III1I11iiii1I + IiI1I1 % IIIII + OoooooooOO - O0 - i11iiII
 if len ( ooO0OO ) == 0 :
  return
  if 77 - 77: oo0Ooo0 * iIii1I11I1II1
 for o0oOO000oO0oo , II1 in enumerate ( ooO0OO ) :
  I1i1Iiiii . append ( [ II1 , o0oOO000oO0oo ] )
  if 98 - 98: iiiii11iII1 % IiI1I1 * OoooooooOO
 IiI1i = Ii11Ii1I ( oO0 )
 if 51 - 51: iIii1I11I1II1 . I1 / oOo0 + i11iiII
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 14080 ) , I1i1Iiiii , IiI1i )
 if 33 - 33: Ii11Ii11I . II111iiii % iiIIiIiIi + i11iiII
 if Oooo0oOO < 0 :
  return
  if 71 - 71: O0o % oo0Ooo0
 O00oO000O0O = I1i1Iiiii [ Oooo0oOO ] [ 0 ]
 if 18 - 18: iiIIiIiIi - oo0Ooo0 . Ii11iii11I . iIii1I11I1II1
 if O00oO000O0O == IiI1i :
  return
  if 2 - 2: oo0Ooo0 . IIIII
 OoOOO00oOO0 ( oO0 , O00oO000O0O )
 o0o0oOOOo0oo ( 'Skin.SetBool(TimezoneSet)' )
 O0ooooOOoo0O ( oO0 )
 if 36 - 36: oOo0 % oOo0 % i1IIi / i1IIi - Ii11Ii11I
 if 30 - 30: iIii1 / iiiii11iII1
def Iii1I1111ii ( ) :
 import select
 I1i1Iiiii = [ ]
 if 72 - 72: II111iiii + i1IIi + i11iiII
 oO0 = 'locale.timezonecountry'
 if 94 - 94: oOo0 . i1IIi - i11iiII % O0 - IIIII
 IIII11I1I = Ooo ( )
 if 72 - 72: IiI1I1
 for o0oOO000oO0oo , iII in enumerate ( IIII11I1I ) :
  I1i1Iiiii . append ( [ iII [ 0 ] , o0oOO000oO0oo ] )
  if 1 - 1: IIIII * III1I11iiii1I * OoooooooOO + Ii11Ii11I
 IiI1i = Ii11Ii1I ( oO0 )
 if 33 - 33: O0 * i11iiII - Ii11iii11I % Ii11iii11I
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 14080 ) , I1i1Iiiii , IiI1i )
 if 18 - 18: Ii11iii11I / O0o * Ii11iii11I + Ii11iii11I * i11iIiiIii * OooooO0oOO
 if Oooo0oOO < 0 :
  return
  if 11 - 11: Ii11Ii11I / I1 - III1I11iiii1I * OoooooooOO + OoooooooOO . I1
 O00oO000O0O = I1i1Iiiii [ Oooo0oOO ] [ 0 ]
 if 26 - 26: IiI1I1 % OooooO0oOO
 if O00oO000O0O == IiI1i :
  return
  if 76 - 76: III1I11iiii1I * iiIIiIiIi
 OoOOO00oOO0 ( oO0 , O00oO000O0O )
 o0o0oOOOo0oo ( 'Skin.SetBool(TimezoneCountrySet)' )
 O0ooooOOoo0O ( oO0 )
 if 52 - 52: oo0Ooo0
 if 19 - 19: iiiii11iII1
def i11i ( ) :
 import select
 import re
 if 73 - 73: oo0Ooo0
 I1i1Iiiii = [ ]
 oO0 = 'locale.language'
 IIII11I1I = IIi1iIIiI ( )
 ooO = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'flags' ) )
 IiI1i = Ii11Ii1I ( oO0 )
 Ooo0oOooo0 = str ( IiI1i )
 oOOOoo00 = "languages=\n"
 oOOOoo00 += Ooo0oOooo0
 Ooooo ( oOOOoo00 , oOOoo00O0O )
 if 9 - 9: O0 % O0 - i11iiII
 oO0000OOo00 = ''
 if 51 - 51: iiiii11iII1 . iIii1I11I1II1 - OooooO0oOO / O0
 for o00O in IIII11I1I :
  try :
   OOOoO00 = "(" + o00O [ 1 ] + ")"
   iII = OOOoO00 . replace ( "_" , " " )
   IIiIi11i1i = o00O [ 4 ]
   I1II1I11I1I = os . path . join ( ooO , '%s.png' % IIiIi11i1i )
   OoOO0o = o00O [ 0 ]
   i1II1 = OoOO0o . replace ( "_" , " " )
   dir = o00O [ 2 ]
   i11i1 = os . path . exists ( I1II1I11I1I )
   oO0000OOo00 = o00O [ 5 ]
  except :
   pass
   if 42 - 42: i11iIiiIii * iIii1I11I1II1 / OooooO0oOO . i11iIiiIii % iIii1
  if not i11i1 :
   I1II1I11I1I = i1iI ( dir )
   I1II1I11I1I = os . path . join ( ooO , '%s.png' % I1II1I11I1I )
  I1i1Iiiii . append ( [ i1II1 + " " + iII , dir , I1II1I11I1I , oO0000OOo00 ] )
  if 29 - 29: iiiii11iII1 % oo0Ooo0 - iiiii11iII1 / oo0Ooo0 . i1IIi
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 309 ) , I1i1Iiiii , IiI1i )
 oO00o0 = Oooo0oOO
 if 31 - 31: Ii11iii11I
 if oO00o0 == IiI1i :
  return
  if 88 - 88: IIIII - Ii11Ii11I + oo0Ooo0 * iiiii11iII1 % iIii1I11I1II1 + O0o
 OoOOO00oOO0 ( oO0 , oO00o0 )
 OoOOO00oOO0 ( 'locale.charset' , 'DEFAULT' )
 o0o0oOOOo0oo ( 'Skin.SetBool(LanguageSet)' )
 O0ooooOOoo0O ( oO0 )
 return
 if 76 - 76: iiiii11iII1 * iiIIiIiIi % Ii11iii11I
 if 57 - 57: iIii1I11I1II1 - i1IIi / Ii11iii11I - O0 * OoooooooOO % II111iiii
 if 68 - 68: OoooooooOO * iIii1 % I1 - III1I11iiii1I
 if 34 - 34: Ii11iii11I . iIii1I11I1II1 * I1 * oOo0 / Ii11iii11I / OooooO0oOO
def oOoOOo0O ( ) :
 import select
 import re
 if 84 - 84: IIIII + i1IIi - II111iiii . OooooO0oOO * OoooooooOO + iiiii11iII1
 I1i1Iiiii = [ ]
 oO0 = 'lookandfeel.skin'
 O0OOO = III1iII1I1ii ( )
 IiI1i = Ii11Ii1I ( oO0 )
 O0oo0OO0 = os . path . join ( o00 , 'addons' )
 II1i11I = os . path . join ( o0oO0 , 'addons' )
 oO0000OOo00 = ''
 OOoOoo = ''
 if 50 - 50: OoooooooOO % iIii1
 for o00O in O0OOO :
  try :
   iI111iI = o00O [ 0 ]
   IIIIiiII111 = o00O [ 1 ]
   id = o00O [ 2 ]
   IIii1111 = os . path . join ( O0oo0OO0 , id , 'icon.png' )
   I1iI = os . path . join ( IIii1111 , 'icon.png' )
   OOoOoo = o00O [ 3 ]
   oO0000OOo00 = o00O [ 4 ]
   i11i1 = os . path . exists ( IIii1111 )
  except :
   pass
  if not i11i1 :
   IIii1111 = os . path . join ( II1i11I , id , 'icon.png' )
   I1iI = os . path . join ( IIii1111 , 'icon.png' )
  I1i1Iiiii . append ( [ iI111iI , id , IIii1111 , oO0000OOo00 ] )
  Ooo0oOooo0 = str ( I1i1Iiiii )
  oOOOoo00 = "menu=\n"
  oOOOoo00 += "menu=\n"
  oOOOoo00 += Ooo0oOooo0
  Ooooo ( oOOOoo00 , oOOoo00O0O )
 IiI1i = Ii11Ii1I ( oO0 )
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 424 ) + " " + xbmc . getLocalizedString ( 166 ) , I1i1Iiiii , IiI1i )
 if Oooo0oOO < 0 :
  return
  if 38 - 38: oOo0 % I1 + OooooO0oOO . i11iIiiIii
 iI111iI = Oooo0oOO
 if 53 - 53: i11iIiiIii * iiIIiIiIi
 if iI111iI == IiI1i :
  return
 OoOOO00oOO0 ( oO0 , iI111iI )
 while iI111iI != IiI1i :
  xbmc . executebuiltin ( 'Action(Select)' )
  IiI1i = Ii11Ii1I ( oO0 )
 o0o0oOOOo0oo ( 'Skin.SetBool(SkinSet)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
 xbmc . executebuiltin ( 'Notification(Please Wait 10 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 9 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 8 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 7 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 6 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 5 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 4 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 3 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 2 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 1 Second,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'RunScript(' + i1111 + 'skincontrol.py)' )
 if 68 - 68: iIii1I11I1II1 * iIii1I11I1II1 . i11iiII / II111iiii % O0o
 if 38 - 38: Ii11Ii11I - oo0Ooo0 / iiIIiIiIi
 if 66 - 66: O0 % OooooO0oOO + i11iIiiIii . I1 / IiI1I1 + OooooO0oOO
 if 86 - 86: i11iiII
 if 5 - 5: III1I11iiii1I * I1
 if 5 - 5: Ii11iii11I
 if 90 - 90: Ii11iii11I . Ii11Ii11I / IiI1I1 - iIii1
def i1iI ( country ) :
 country = country . lower ( )
 if 40 - 40: OoooooooOO
 if country == 'basque' : return 'bq'
 if country == 'filipino' : return 'ph'
 if country == 'haitian (haitian creole)' : return 'ht'
 if country == 'georgian' : return 'un'
 if country == 'lithuanian' : return 'lt'
 if country == 'mongolian (mongolia)' : return 'un'
 if country == 'romansh' : return 'rm'
 if country == 'sinhala' : return 'un'
 if country == 'spanish (venezuela)' : return 'un'
 if country == 'vietnamese (viet nam)' : return 'vi'
 if 25 - 25: III1I11iiii1I + IiI1I1 / Ii11Ii11I . i11iiII % O0 * IIIII
 return 'un'
 if 84 - 84: Ii11Ii11I % IiI1I1 + i11iIiiIii
 if 28 - 28: O0o + IIIII * oo0Ooo0 % oOo0 . iIii1 % O0
def I1iiiiIii ( ) :
 import select
 I1i1Iiiii = [ ]
 if 19 - 19: IIIII - O0o . O0
 oO0 = 'subtitles.languages'
 if 60 - 60: II111iiii + O0o
 iI111iI = xbmc . getSkinDir ( ) . lower ( )
 O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' , iI111iI , 'language' ) )
 if 9 - 9: Ii11Ii11I * OoooooooOO - iIii1I11I1II1 + I1 / IIIII . IIIII
 try :
  IiI1i , iiIIi , iiI1iI111ii1i = os . walk ( O0oo0OO0 ) . next ( )
 except :
  iiIIi = [ ]
  if 32 - 32: II111iiii * I1 % i1IIi - iiIIiIiIi + iIii1I11I1II1 + OooooO0oOO
 if len ( iiIIi ) == 0 :
  O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://xbmc/addons/' , iI111iI , 'language' ) )
  if 60 - 60: OooooO0oOO % I1 * IIIII % II111iiii
  try :
   IiI1i , iiIIi , iiI1iI111ii1i = os . walk ( O0oo0OO0 ) . next ( )
  except :
   return
   if 70 - 70: IIIII % oOo0 + oo0Ooo0 / IiI1I1 % O0
 if len ( iiIIi ) == 0 :
  return
  if 100 - 100: i11iiII + oo0Ooo0 * i11iiII
 iiIIi = sorted ( iiIIi , key = str . lower )
 if 80 - 80: i11iiII * O0 - IiI1I1
 ooO = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'flags' ) )
 if 66 - 66: i11iIiiIii - oo0Ooo0 * O0o
 import re
 for o0oOO000oO0oo , dir in enumerate ( iiIIi ) :
  i11i1 = False
  III1Iiii1I11 = ''
  try :
   iI = oO0OOoO0 ( dir )
   III1Iiii1I11 = re . compile ( '<language locale="(.+?)">' ) . search ( iI ) . group ( 1 )
   I1II1I11I1I = os . path . join ( ooO , '%s.png' % III1Iiii1I11 . lower ( ) )
   i11i1 = os . path . exists ( I1II1I11I1I )
  except :
   pass
   if 76 - 76: i11iIiiIii + i11iiII / OooooO0oOO - IIIII - IiI1I1 + OooooO0oOO
  if not i11i1 :
   I1II1I11I1I = i1iI ( dir )
   I1II1I11I1I = os . path . join ( ooO , '%s.png' % I1II1I11I1I )
   if 51 - 51: iIii1I11I1II1 . Ii11Ii11I + iIii1I11I1II1
  I1i1Iiiii . append ( [ dir , o0oOO000oO0oo , I1II1I11I1I ] )
  if 95 - 95: iiiii11iII1
 list = Ii11Ii1I ( oO0 )
 IiI1i = None
 if 46 - 46: I1 + IIIII
 if len ( list ) > 0 :
  IiI1i = list [ 0 ]
  if 70 - 70: iiIIiIiIi / iIii1I11I1II1
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 21448 ) , I1i1Iiiii , IiI1i )
 if 85 - 85: OoooooooOO % i1IIi * OoooooooOO / OooooO0oOO
 if Oooo0oOO < 0 :
  return
  if 96 - 96: OoooooooOO + oOo0
 oO00o0 = I1i1Iiiii [ Oooo0oOO ] [ 0 ]
 if 44 - 44: oOo0
 if ( oO00o0 == IiI1i ) and ( len ( list ) == 1 ) :
  return
  if 20 - 20: iIii1 + IiI1I1 / O0 % iIii1I11I1II1
 OoOOO00oOO0 ( oO0 , [ oO00o0 ] )
 o0o0oOOOo0oo ( 'Skin.SetBool(SubtitleDownloadSet)' )
 O0ooooOOoo0O ( oO0 )
 if 88 - 88: I1 / II111iiii
 if 87 - 87: OooooO0oOO - OooooO0oOO - iiIIiIiIi + oOo0
def OOooo ( ) :
 import select
 I1i1Iiiii = [ ]
 if 31 - 31: i11iiII % IIIII
 iI1I = xbmc . getLocalizedString ( 308 )
 OoO = xbmc . getLocalizedString ( 309 )
 if 100 - 100: iIii1I11I1II1 + I1 / O0o . i11iIiiIii
 oO0 = 'locale.subtitlelanguage'
 if 14 - 14: i11iiII * oo0Ooo0 + iiIIiIiIi + O0 + i11iIiiIii
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'subtitle.txt' ) )
 if 77 - 77: i11iiII / OoooooooOO
 IIii11I1i1I = [ ]
 try :
  i111IiI1I = open ( file , 'r' )
  IIii11I1i1I = i111IiI1I . readlines ( )
  i111IiI1I . close ( )
 except :
  return
  if 99 - 99: iiIIiIiIi
 IIii11I1i1I = sorted ( IIii11I1i1I , key = str . lower )
 if 76 - 76: IIIII * iiiii11iII1
 I1i1Iiiii . append ( [ iI1I , 0 ] )
 I1i1Iiiii . append ( [ OoO , 1 ] )
 if 82 - 82: IiI1I1 * iiIIiIiIi / OooooO0oOO
 o0oOO000oO0oo = 2
 if 36 - 36: OoooooooOO - i1IIi . O0 / II111iiii + i11iiII
 for Oooo0oOO in IIii11I1i1I :
  exec ( Oooo0oOO )
  I1i1Iiiii . append ( [ Oooo0oOO , o0oOO000oO0oo ] )
  o0oOO000oO0oo += 1
  if 33 - 33: II111iiii / Ii11Ii11I * O0 % IiI1I1 * Ii11iii11I
 IiI1i = Ii11Ii1I ( oO0 )
 if 100 - 100: III1I11iiii1I . iIii1 / IiI1I1 % I1 % II111iiii - IIIII
 if IiI1i == 'original' :
  IiI1i = iI1I
 elif IiI1i == 'default' :
  IiI1i = OoO
  if 46 - 46: O0 * II111iiii - O0o * Ii11Ii11I
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 286 ) , I1i1Iiiii , IiI1i )
 if 33 - 33: IiI1I1
 if Oooo0oOO < 0 :
  return
  if 74 - 74: oo0Ooo0 + O0 + i1IIi - i1IIi + II111iiii
 if Oooo0oOO == 0 :
  oO00o0 = 'original'
 elif Oooo0oOO == 1 :
  oO00o0 = 'default'
 else :
  oO00o0 = I1i1Iiiii [ Oooo0oOO ] [ 0 ]
  if 83 - 83: OooooO0oOO - iiiii11iII1 + oo0Ooo0
 if oO00o0 == IiI1i :
  return
  if 5 - 5: IiI1I1
 OoOOO00oOO0 ( oO0 , oO00o0 )
 o0o0oOOOo0oo ( 'Skin.SetBool(SubtitlePreferredSet)' )
 O0ooooOOoo0O ( oO0 )
 if 46 - 46: III1I11iiii1I
 if 45 - 45: Ii11Ii11I
def IIi ( ) :
 import select
 I1i1Iiiii = [ ]
 if 94 - 94: II111iiii - O0o
 oO0 = 'locale.country'
 if 91 - 91: O0o
 oO00o0 = Ii11Ii1I ( 'locale.language' )
 iI = oO0OOoO0 ( oO00o0 )
 if 31 - 31: oo0Ooo0 / i11iIiiIii % iIii1I11I1II1 + oo0Ooo0 / i11iIiiIii
 if not iI :
  return
  if 70 - 70: IIIII * O0 . iIii1 + iiiii11iII1 . III1I11iiii1I
 import re
 if 14 - 14: iIii1I11I1II1 % iIii1I11I1II1 * i11iIiiIii - IIIII - iIii1
 o00oo0 = [ ]
 if 59 - 59: iiiii11iII1 * II111iiii . O0
 O000OoOO0 = re . compile ( '<region name="(.+?)"' ) . findall ( iI )
 for i1IiIII111i1 in O000OoOO0 :
  o00oo0 . append ( i1IiIII111i1 )
  if 57 - 57: IiI1I1 % IiI1I1 * i11iIiiIii
 O000OoOO0 = re . compile ( '<locale="(.+?)">' ) . findall ( iI )
 for i1IiIII111i1 in O000OoOO0 :
  o00oo0 . append ( i1IiIII111i1 )
  if 7 - 7: O0 . IiI1I1
 o00oo0 . sort ( )
 if 51 - 51: IIIII - O0 % oOo0 - II111iiii
 for o0oOO000oO0oo , i1IiIII111i1 in enumerate ( o00oo0 ) :
  I1i1Iiiii . append ( [ i1IiIII111i1 , o0oOO000oO0oo ] )
  if 31 - 31: iiIIiIiIi / O0o - iiIIiIiIi - oo0Ooo0
 if len ( I1i1Iiiii ) < 1 :
  return
  if 7 - 7: iiIIiIiIi % O0 . I1 + iiiii11iII1 - iIii1
 IiI1i = Ii11Ii1I ( oO0 )
 if 75 - 75: iIii1
 Oooo0oOO = select . select ( xbmc . getLocalizedString ( 20026 ) , I1i1Iiiii , IiI1i )
 if 71 - 71: Ii11Ii11I
 if Oooo0oOO < 0 :
  return
  if 53 - 53: OoooooooOO % IiI1I1 . III1I11iiii1I / i11iIiiIii % iiIIiIiIi
 i1IiIII111i1 = I1i1Iiiii [ Oooo0oOO ] [ 0 ]
 if 28 - 28: iIii1
 if i1IiIII111i1 == IiI1i :
  return
  if 58 - 58: I1
 OoOOO00oOO0 ( oO0 , i1IiIII111i1 )
 o0o0oOOOo0oo ( 'Skin.SetBool(RegionSet)' )
 O0ooooOOoo0O ( oO0 )
 if 37 - 37: O0o - iIii1I11I1II1 / OooooO0oOO
 if 73 - 73: i11iIiiIii - III1I11iiii1I
def ii11I1 ( up ) :
 oO0 = 'lookandfeel.skinzoom'
 oO0oo = Ii11Ii1I ( oO0 )
 if 38 - 38: OoooooooOO * Ii11Ii11I % O0 * I1
 if ( up ) :
  oO0oo += 2
 else :
  oO0oo -= 2
  if 29 - 29: OooooO0oOO / i1IIi . iiiii11iII1 - I1 - I1 - IiI1I1
 if oO0oo > 20 :
  oO0oo = - 20
  if 20 - 20: i1IIi % IIIII . iiiii11iII1 / III1I11iiii1I * i11iIiiIii * oo0Ooo0
 if oO0oo < - 20 :
  oO0oo = 20
  if 85 - 85: i11iiII . I1 / Ii11Ii11I . O0 % Ii11iii11I
 OoOOO00oOO0 ( oO0 , oO0oo )
 O0ooooOOoo0O ( oO0 )
 if 90 - 90: O0o % O0 * iIii1I11I1II1 . iiIIiIiIi
def I1iii11 ( ) :
 O0ooooOOoo0O ( 'locale.language' )
 O0ooooOOoo0O ( 'locale.subtitlelanguage' )
 O0ooooOOoo0O ( 'locale.country' )
 O0ooooOOoo0O ( 'locale.timezonecountry' )
 O0ooooOOoo0O ( 'locale.timezone' )
 O0ooooOOoo0O ( 'lookandfeel.skinzoom' )
 O0ooooOOoo0O ( 'subtitles.languages' )
 O0ooooOOoo0O ( 'subtitles.charset' )
 if 74 - 74: O0 / i1IIi
 if 78 - 78: OoooooooOO . IIIII + Ii11Ii11I - i1IIi
 if 31 - 31: OoooooooOO . oo0Ooo0
 if 83 - 83: iiIIiIiIi . O0 / O0o / oo0Ooo0 - II111iiii
 oO0 = 'lookandfeel.skin'
 iI111iI = Ii11Ii1I ( oO0 )
 if iI111iI :
  if iI111iI . startswith ( 'skin.' ) :
   iI111iI = iI111iI [ 5 : ]
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( oO0 , iI111iI ) )
  if 100 - 100: IIIII
  if 46 - 46: I1 / iIii1I11I1II1 % iiIIiIiIi . iIii1I11I1II1 * iiIIiIiIi
def O0ooooOOoo0O ( setting ) :
 oO0oo = Ii11Ii1I ( setting )
 if 38 - 38: OooooO0oOO - iiIIiIiIi / O0 . Ii11iii11I
 if isinstance ( oO0oo , list ) :
  oO0oo = str ( oO0oo [ 0 ] )
 else :
  oO0oo = str ( oO0oo )
  if 45 - 45: Ii11iii11I
 if setting == 'subtitles.charset' :
  iiIIiiIi1Ii11 = oo0O0O00 ( )
  for oOO00O in iiIIiiIi1Ii11 :
   if oO0oo == oOO00O [ 1 ] :
    xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , oOO00O [ 0 ] ) )
    break
  return
  if 83 - 83: I1 . OoooooooOO
 if setting == 'locale.timezonecountry' and len ( oO0oo ) == 0 :
  oO0oo = 'Default'
  if 58 - 58: i11iIiiIii + OoooooooOO % OoooooooOO / III1I11iiii1I / i11iIiiIii
 if oO0oo :
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , oO0oo ) )
 else :
  xbmc . executebuiltin ( 'Skin.Reset(%s)' % setting )
  if 62 - 62: IIIII / OooooO0oOO
  if 7 - 7: OoooooooOO . III1I11iiii1I
class O000OOO0OOo ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  global Oo0o0000o0o0
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  self . icon = kwargs [ 'icon' ]
  self . maintext = kwargs [ 'maintext' ]
  if 32 - 32: IiI1I1 * O0
  if not os . path . exists ( Oo0oO0ooo ) :
   self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/whitebg.jpg' ) )
   if 100 - 100: Ii11Ii11I % iIii1I11I1II1 * II111iiii - iiIIiIiIi
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0oO0ooo ) )
  self . updateimage = xbmcgui . ControlImage ( 200 , 230 , 250 , 250 , i1111 + 'resources/images/' + self . icon )
  self . addControl ( self . updateimage )
  self . updateimage . setAnimations ( [ ( 'conditional' , 'effect=rotate start=0 end=360 center=auto time=3000 loop=true condition=true' , ) ] )
  if 92 - 92: Ii11Ii11I
  if 22 - 22: O0o % iiIIiIiIi * OooooO0oOO / oo0Ooo0 % i11iIiiIii * iIii1
  if 95 - 95: OoooooooOO - III1I11iiii1I * iiiii11iII1 + I1
  if 10 - 10: i11iiII / i11iIiiIii
  if 92 - 92: iIii1 . Ii11iii11I
  if 85 - 85: OooooO0oOO . Ii11iii11I
  if not os . path . exists ( Oo0oO0ooo ) :
   self . strDescription = xbmcgui . ControlTextBox ( 570 , 250 , 600 , 300 , 'font14' , '0xFF000000' )
   self . addControl ( self . strDescription )
   self . strDescription . setText ( self . maintext )
   if 78 - 78: Ii11Ii11I * Ii11iii11I + iIii1I11I1II1 + iIii1I11I1II1 / Ii11iii11I . IiI1I1
 def onAction ( self , action ) :
  if action == I1ii11iIi11i or action == Oo :
   print "ESC and HOME Disabled"
   if 97 - 97: Ii11Ii11I / Ii11iii11I % i1IIi % OooooO0oOO
   if 18 - 18: iIii1I11I1II1 % iIii1
class O00oO0 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  if 97 - 97: Ii11iii11I - iIii1I11I1II1
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = kwargs [ 'backbutton' ]
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = kwargs [ 'nextbutton' ]
  else :
   self . nextbutton = ''
   if 75 - 75: OoooooooOO * III1I11iiii1I
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 9 - 9: III1I11iiii1I - II111iiii + O0 / iIii1I11I1II1 / i11iIiiIii
  if kwargs [ 'selectbutton' ] != '' :
   self . selectbutton = kwargs [ 'selectbutton' ]
  else :
   self . selectbutton = ''
  self . toggleup = kwargs [ 'toggleup' ]
  self . toggledown = kwargs [ 'toggledown' ]
  self . selectbuttonfunction = kwargs [ 'selectbuttonfunction' ]
  self . toggleupfunction = kwargs [ 'toggleupfunction' ]
  self . toggledownfunction = kwargs [ 'toggledownfunction' ]
  self . maintext = kwargs [ 'maintext' ]
  if 39 - 39: III1I11iiii1I * O0o + iIii1I11I1II1 - III1I11iiii1I + oo0Ooo0
  if kwargs [ 'noconnectionbutton' ] != '' :
   self . noconnectionbutton = kwargs [ 'noconnectionbutton' ]
  else :
   self . noconnectionbutton = ''
   if 69 - 69: O0
  self . noconnectionfunction = kwargs [ 'noconnectionfunction' ]
  if 85 - 85: Ii11Ii11I / O0
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if 18 - 18: i11iiII % O0 * OooooO0oOO
  if 62 - 62: Ii11iii11I . III1I11iiii1I . OoooooooOO
  self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button1 )
  if 11 - 11: oo0Ooo0 / iIii1
  if 73 - 73: i1IIi / i11iIiiIii
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 58 - 58: O0o . II111iiii + oOo0 - i11iIiiIii / II111iiii / O0
   if 85 - 85: I1 + oo0Ooo0
  if self . toggleup == '' :
   if self . noconnectionbutton == '' :
    self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   else :
    if o0oOoO00o != '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
    elif o0oOoO00o == '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . noconnectionbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button0 )
   self . button0 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button0 . controlUp ( self . button1 )
   if self . backbutton != '' :
    self . button0 . controlLeft ( self . button2 )
  else :
   self . toggleupbutton = xbmcgui . ControlButton ( 1000 , 480 , 35 , 35 , '' , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . toggledownbutton = xbmcgui . ControlButton ( 1000 , 500 , 35 , 35 , '' , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . toggleupbutton )
   self . addControl ( self . toggledownbutton )
   self . strToggleUp = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . strToggleDown = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . addControl ( self . strToggleUp )
   self . addControl ( self . strToggleDown )
   self . strToggleUp . setLabel ( self . toggleup )
   self . strToggleDown . setLabel ( self . toggledown )
   self . toggleupbutton . controlDown ( self . toggledownbutton )
   if self . backbutton != '' :
    self . toggleupbutton . controlLeft ( self . button2 )
    self . toggledownbutton . controlLeft ( self . button2 )
   self . toggledownbutton . controlUp ( self . toggleupbutton )
   self . toggledownbutton . controlDown ( self . button1 )
   if 10 - 10: III1I11iiii1I / IIIII + I1 / i1IIi
  if self . toggleup == '' :
   self . setFocus ( self . button1 )
  else :
   self . setFocus ( self . toggleupbutton )
   if 27 - 27: IiI1I1
  if self . backbutton != '' :
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
  if self . toggleup == '' :
   self . button1 . controlUp ( self . button0 )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . button0 )
  else :
   self . button1 . controlUp ( self . toggledownbutton )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . toggledownbutton )
    if 67 - 67: iiiii11iII1
    if 55 - 55: OooooO0oOO - iiIIiIiIi * i11iiII + I1 * I1 * O0
    if 91 - 91: Ii11iii11I - oo0Ooo0 % iIii1I11I1II1 - OoooooooOO % Ii11Ii11I
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 98 - 98: IIIII . IIIII * oOo0 * II111iiii * Ii11iii11I
  if o0oOoO00o == '0' :
   self . strWarning = xbmcgui . ControlTextBox ( 830 , 300 , 300 , 200 , 'font13' , '0xFFFF0000' )
   self . addControl ( self . strWarning )
   self . strWarning . setText ( 'No internet connection.[CR]To be able to get the most out of this device and set options like this you must be connected to the web. Please insert your ethernet cable or setup your Wi-Fi.' )
   if 92 - 92: O0o
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 40 - 40: I1 / III1I11iiii1I
 def onAction ( self , action ) :
  if action == I1ii11iIi11i and self . selectbutton == 'Register' :
   self . close ( )
   OOOoO000 ( )
   if 57 - 57: II111iiii
 def onControl ( self , control ) :
  if control == self . button0 :
   if o0oOoO00o != '0' or self . noconnectionbutton == '' :
    exec self . selectbuttonfunction
   else :
    exec self . noconnectionfunction
  if control == self . button1 :
   exec self . nextbuttonfunction
  if self . backbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
    if 54 - 54: O0o + oOo0 + i11iIiiIii
 def message ( self , message ) :
  iIiiiI = xbmcgui . Dialog ( )
  iIiiiI . ok ( " My message title" , message )
  if 28 - 28: oOo0
class ooo000o0ooO0 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  if 10 - 10: Ii11Ii11I . iiIIiIiIi + IIIII / OoooooooOO - iiIIiIiIi / iIii1
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = kwargs [ 'backbutton' ]
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = kwargs [ 'nextbutton' ]
  else :
   self . nextbutton = ''
   if 76 - 76: i11iiII % iiiii11iII1 . iIii1I11I1II1 - III1I11iiii1I * OoooooooOO . iiIIiIiIi
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 84 - 84: Ii11iii11I + iIii1
  if kwargs [ 'optionbutton1' ] != '' :
   self . optionbutton1 = kwargs [ 'optionbutton1' ]
  else :
   self . optionbutton1 = ''
  if kwargs [ 'optionbutton2' ] != '' :
   self . optionbutton2 = kwargs [ 'optionbutton2' ]
  else :
   self . optionbutton2 = ''
  if kwargs [ 'optionbutton3' ] != '' :
   self . optionbutton3 = kwargs [ 'optionbutton3' ]
  else :
   self . optionbutton3 = ''
   if 28 - 28: oOo0 - i11iIiiIii . OooooO0oOO + III1I11iiii1I / OooooO0oOO
  self . maintext = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'maintext' ] )
  self . option1function = kwargs [ 'option1function' ]
  self . option2function = kwargs [ 'option2function' ]
  self . option3function = kwargs [ 'option3function' ]
  if 35 - 35: III1I11iiii1I
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if self . nextbutton != '' :
   self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button1 )
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 75 - 75: O0o / OooooO0oOO . III1I11iiii1I * oo0Ooo0 - II111iiii
  self . button0 = xbmcgui . ControlButton ( 910 , 400 , 225 , 35 , self . optionbutton1 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . button3 = xbmcgui . ControlButton ( 910 , 440 , 225 , 35 , self . optionbutton2 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . button4 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . optionbutton3 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button0 )
  self . addControl ( self . button3 )
  self . addControl ( self . button4 )
  self . button0 . controlDown ( self . button3 )
  self . button3 . controlDown ( self . button4 )
  self . setFocus ( self . button1 )
  self . button3 . controlUp ( self . button0 )
  self . button4 . controlUp ( self . button3 )
  if self . nextbutton != '' :
   self . button0 . controlUp ( self . button1 )
   self . button3 . controlRight ( self . button1 )
   self . button4 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button4 . controlRight ( self . button1 )
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button1 . controlDown ( self . button0 )
   self . button1 . controlUp ( self . button4 )
  if self . backbutton != '' :
   self . button0 . controlLeft ( self . button2 )
   self . button3 . controlLeft ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
   self . button2 . controlUp ( self . button4 )
   self . button4 . controlLeft ( self . button2 )
   if 41 - 41: IiI1I1
   if 77 - 77: Ii11iii11I
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 65 - 65: II111iiii . iiiii11iII1 % oOo0 * IIIII
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 38 - 38: I1 / iiIIiIiIi % O0o
 def onAction ( self , action ) :
  if action == I1ii11iIi11i and 'Register' in self . header :
   self . close ( )
   if 11 - 11: iiIIiIiIi - oOo0 + II111iiii - iIii1I11I1II1
 def onControl ( self , control ) :
  if control == self . button0 :
   exec self . option1function
  if self . nextbutton != '' :
   if control == self . button1 :
    exec self . nextbuttonfunction
  if self . nextbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
  if control == self . button3 :
   exec self . option2function
  if control == self . button4 :
   exec self . option3function
   if 7 - 7: III1I11iiii1I - iIii1 / II111iiii * IiI1I1 . iiIIiIiIi * iiIIiIiIi
def O0O0oOOo0O ( ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30003 ) ,
 background = 'language1.png' ,
 backbutton = '' ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = '' ,
 nextbuttonfunction = 'self.close();Check_skins("language")' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30004 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "doSetLanguage();self.close();xbmc.executebuiltin('RunScript('+addonfolder+'skincontrol.py)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30005 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 II11 . doModal ( )
 del II11
 if 68 - 68: iiIIiIiIi * OoooooooOO * iIii1I11I1II1 . II111iiii
def O0Oo ( ) :
 II11 = ooo000o0ooO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30006 ) ,
 background = 'region1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();Check_skins("region")' ,
 nextbuttonfunction = 'self.close();SelectResolution()' ,
 optionbutton1 = iIiiiI1IiI1I1 . getLocalizedString ( 30007 ) ,
 optionbutton2 = iIiiiI1IiI1I1 . getLocalizedString ( 30008 ) ,
 optionbutton3 = iIiiiI1IiI1I1 . getLocalizedString ( 30009 ) ,
 option1function = "doSetRegion()" ,
 option2function = "doSetTZCountry()" ,
 option3function = "doSetTZ()" ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30010 ) ,
 )
 II11 . doModal ( )
 del II11
 if 36 - 36: IiI1I1 / II111iiii / III1I11iiii1I / III1I11iiii1I + OooooO0oOO
def oO0Ooo0ooOO0 ( ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30011 ) ,
 background = 'resolution1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectRegion()' ,
 nextbuttonfunction = 'self.close();SelectZoom()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30011 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "RESOLUTION()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30012 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 II11 . doModal ( )
 del II11
 if 46 - 46: IiI1I1 % I1
def ooo0o0O0o ( ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30013 ) ,
 background = 'zoom1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectResolution()' ,
 nextbuttonfunction = 'self.close();SelectWeather()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30014 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin('ActivateWindow(screencalibration)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30015 ) ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 II11 . doModal ( )
 del II11
 if 62 - 62: Ii11Ii11I + i11iIiiIii + O0o / i11iIiiIii
def I1Ii ( ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30016 ) ,
 background = 'weather1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectZoom()' ,
 nextbuttonfunction = 'self.close();InstallLocalContent()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30017 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin(xbmcaddon.Addon(id='weather.yahoo').openSettings(sys.argv[0]))" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30018 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 70 - 70: O0o . OoooooooOO - iiIIiIiIi
def iII11I1Ii1 ( ) :
 o0o0 = 0
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30020 ) ,
 background = 'skins1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectLanguage()' ,
 nextbuttonfunction = 'self.close();SelectRegion()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30021 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "doSetSkin()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30022 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 59 - 59: oo0Ooo0 + i11iIiiIii
def oo0OOo0O ( ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30023 ) ,
 background = 'keywords1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();InstallLocalContent()' ,
 nextbuttonfunction = 'self.close();FINISH()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30024 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "KEYWORD_SEARCH()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30025 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 39 - 39: OoooooooOO + oOo0 % oo0Ooo0 / oo0Ooo0
def I1i ( ) :
 II11 = ooo000o0ooO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30026 ) ,
 background = 'localcontent1.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectWeather()' ,
 nextbuttonfunction = 'self.close();InstallKeyword()' ,
 optionbutton1 = iIiiiI1IiI1I1 . getLocalizedString ( 30027 ) ,
 optionbutton2 = iIiiiI1IiI1I1 . getLocalizedString ( 30028 ) ,
 optionbutton3 = iIiiiI1IiI1I1 . getLocalizedString ( 30029 ) ,
 option1function = "ADDMUSIC()" ,
 option2function = "ADDPHOTOS()" ,
 option3function = "ADDVIDEOS()" ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30030 ) ,
 )
 II11 . doModal ( )
 del II11
 if 72 - 72: iIii1I11I1II1
def iiIi ( mode ) :
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30062 ) ,
 background = 'register.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30001 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();SelectLanguage()' ,
 nextbuttonfunction = 'self.close();o0("check")' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30063 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "self.close();o0('normal')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30064 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 71 - 71: I1 . i1IIi
def o0 ( mode ) :
 if mode == 'check' :
  if OooO0ooo0o ( ) :
   iii1 = iIiiiI1IiI1I1 . getLocalizedString ( 30065 )
  else :
   iii1 = iIiiiI1IiI1I1 . getLocalizedString ( 30066 )
 else :
  iii1 = ''
  I1iOOOO = mode
 II11 = O00oO0 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30062 ) ,
 background = 'register.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30067 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();OOOoO000()' ,
 nextbuttonfunction = 'self.close();OooO0ooo0o()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30068 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "self.close();OooO0ooo0o()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30069 ) + I1iOOOO + '[/COLOR]' + iii1 ,
 noconnectionbutton = 'ADDON.getLocalizedString(30019)' ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 88 - 88: iiIIiIiIi
def OOOoO000 ( ) :
 II11 = O00oO0 (
 header = 'ADDON.getLocalizedString(30067)' ,
 background = 'donotregister.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30070 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30071 ) ,
 backbuttonfunction = 'self.close()' ,
 nextbuttonfunction = 'OooO0ooo0o()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30072 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "I1iIi1iiIIiI()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30073 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 II11 . doModal ( )
 del II11
 if 19 - 19: II111iiii * III1I11iiii1I + IiI1I1
def O0ooO00oO ( ) :
 II11 = O000OOO0OOo (
 header = 'Update In Progress' ,
 background = 'register.png' ,
 icon = 'update_software.png' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30074 ) ,
 )
 II11 . doModal ( )
 del II11
 if 36 - 36: oo0Ooo0
def O0oii111 ( ) :
 if OooO0ooo0o ( ) :
  O0OO0oOoO0O0O ( "verify" )
 else :
  iiIi ( 'error' )
  if 99 - 99: oOo0
def I1iIi1iiIIiI ( ) :
 oOoOOoOOooOO ( iIiiiI1IiI1I1 . getLocalizedString ( 30079 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30080 ) )
 if 31 - 31: oo0Ooo0 / O0o * i1IIi . I1
def O0OO0oOoO0O0O ( mode ) :
 if mode == 'language' :
  if not os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
   O0Oo ( )
  else :
   iII11I1Ii1 ( )
 if mode == 'region' :
  if not os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
   O0O0oOOo0O ( )
  else :
   iII11I1Ii1 ( )
   if 57 - 57: oo0Ooo0 + iIii1I11I1II1 % i1IIi % iiiii11iII1
def OO0oo ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(musicfiles,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 15 - 15: iIii1I11I1II1 % OoooooooOO - O0o * IiI1I1 + iIii1
def i1I1II1iIIi11 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(pictures,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 49 - 49: OoooooooOO * iIii1 - O0o . oOo0
def O000o0 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(video,files,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 98 - 98: IIIII . iIii1 % II111iiii
def O0OoOoO00O ( ) :
 print "RESOLUTION"
 xbmc . executebuiltin ( 'ActivateWindow(systemsettings,return)' )
 xbmc . executebuiltin ( 'Action(Right)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 96 - 96: iiiii11iII1 % O0o . OooooO0oOO + oo0Ooo0
def Ii11Iii1i1ii ( ) :
 print "KEYWORD_SEARCH"
 Ii1i1i1111 = ''
 o0oO0O00oOo = 'http://urlshortbot.com/venztech'
 I1111I1II11 = iiiIIIIiIi ( iIiiiI1IiI1I1 . getLocalizedString ( 30031 ) )
 Ii1i1i1111 = o0oO0O00oOo + I1111I1II11
 if not os . path . exists ( IIiiIiI1 ) :
  os . makedirs ( IIiiIiI1 )
 if I1111I1II11 != '' :
  try :
   Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30032 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30033 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
   downloader . download ( Ii1i1i1111 , i1I11 )
   Iii1ii1II11i . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30035 ) )
   if zipfile . is_zipfile ( i1I11 ) :
    iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30036 ) , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30037 ) )
   else :
    if os . path . getsize ( i1I11 ) > 100000 :
     Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30038 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30039 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
     os . rename ( i1I11 , i1i1II + '20150815123607.tar' )
     Iii1ii1II11i . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30040 ) )
     Iii1ii1II11i . close ( )
     xbmc . executebuiltin ( 'reboot' )
    else :
     xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
  except :
   xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
   if 34 - 34: OoooooooOO . O0 / oOo0 * I1 - OooooO0oOO
def iiiIIIIiIi ( searchtext ) :
 print "SEARCH"
 IiiiI = ''
 Iii = xbmc . Keyboard ( IiiiI , searchtext )
 Iii . doModal ( )
 if Iii . isConfirmed ( ) :
  IiiiI = Iii . getText ( ) . replace ( ' ' , '%20' )
  if IiiiI == None :
   return False
 return IiiiI
 if 34 - 34: IiI1I1 / Ii11Ii11I - iiIIiIiIi
def oO0OO00o00 ( ) :
 print "FINISH"
 if iI111iI == 'skin.confluence' and os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
  I11I1 = iIiiiI . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30044 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30045 ) , yeslabel = iIiiiI1IiI1I1 . getLocalizedString ( 30046 ) , nolabel = iIiiiI1IiI1I1 . getLocalizedString ( 30047 ) )
  if I11I1 == 0 :
   iII11I1Ii1 ( )
 if os . path . exists ( i1I11 ) :
  iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30048 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30049 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30050 ) )
  if zipfile . is_zipfile ( i1I11 ) :
   try :
    Iii1ii1II11i . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30051 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30052 ) , ' ' , ' ' )
    extract . all ( i1I11 , OoO000 , Iii1ii1II11i )
    Iii1ii1II11i . close ( )
    iiI1i1Iii111 = os . path . join ( o0oO0 , 'newbuild' )
    if not os . path . exists ( iiI1i1Iii111 ) :
     os . makedirs ( iiI1i1Iii111 )
   except :
    iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30053 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30054 ) )
  os . remove ( i1I11 )
  i111I11i ( )
  iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30055 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30056 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30057 ) )
  xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
  ii1 ( )
 OoOO = 'quit'
 if 44 - 44: oo0Ooo0
def O0O0o0o0o ( url ) :
 urllib . urlretrieve ( url , i1I11 )
 if 9 - 9: O0o + I1 - iIii1I11I1II1 - IiI1I1 + i11iiII
def o000O0OOoo ( url , video ) :
 global Oo0o0000o0o0
 Oo0o0000o0o0 = threading . Thread ( target = O0O0o0o0o , args = [ url ] )
 Oo00OOOOoo0oo = threading . Thread ( target = O0ooO00oO )
 try :
  Oo0o0000o0o0 . start ( )
  print "###Download Started"
 except :
  iIiiiI . ok ( 'Error' , 'Unable to download updates from server. Please try opening a web browser on your PC to make sure your internet is working correctly. Click OK to try again.' )
  return
 try :
  yt . PlayVideo ( video )
 except :
  pass
 while xbmc . Player ( ) . isPlaying ( ) :
  xbmc . sleep ( 500 )
 Oo00OOOOoo0oo . start ( )
 while Oo0o0000o0o0 . isAlive ( ) :
  xbmc . sleep ( 500 )
 if os . path . exists ( i1I11 ) and zipfile . is_zipfile ( i1I11 ) :
  O00OOooo0Ooo = zipfile . ZipFile ( i1I11 , 'r' )
  O00OOooo0Ooo . extractall ( OoO000 )
  try :
   os . remove ( i1I11 )
  except :
   print "### Failed to remove temp file"
  i111I11i ( )
  print "### Removed textures"
  xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
  ii1 ( )
  if 66 - 66: oOo0
def OooO0ooo0o ( ) :
 if 91 - 91: oOo0 + iiiii11iII1
 o0oO0O00oOo = ''
 OoOooo = ''
 oo00OOoOoO00 = I1iiioOO0OO0O ( )
 if '~' in oo00OOoOoO00 :
  o0oO0O00oOo , OoOooo = oo00OOoOoO00 . split ( '~' )
  o0oO0O00oOo = o00o ( 'd' , o0oO0O00oOo )
  OoOooo = o00o ( 'd' , OoOooo )
 else :
  try :
   o0oO0O00oOo = o00o ( 'd' , oo00OOoOoO00 )
  except :
   pass
   if 47 - 47: i11iiII + iiIIiIiIi - oOo0 % OoooooooOO
 if o0oO0O00oOo == o00o ( 'd' , '595d515c110b0d1804' ) :
  xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
  OoOO = 'quit'
  if 52 - 52: Ii11iii11I / Ii11Ii11I - iIii1
  if 49 - 49: I1 / O0o . i11iIiiIii
 if o00o ( 'd' , '5b6767632d2222675f555521605804060d1006' ) in o0oO0O00oOo :
  if '~' in oo00OOoOoO00 and not os . path . exists ( xbmc . translatePath ( os . path . join ( o0oO0 , 'media' , 'branding' ) ) ) :
   try :
    xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
    urllib . urlretrieve ( OoOooo , i1I11 )
    xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
   except :
    pass
   if os . path . exists ( i1I11 ) and zipfile . is_zipfile ( i1I11 ) :
    O00OOooo0Ooo = zipfile . ZipFile ( i1I11 , 'r' )
    O00OOooo0Ooo . extractall ( OoO000 )
    O00OOooo0Ooo . close ( )
    try :
     os . remove ( i1I11 )
    except :
     pass
  o0 ( o0oO0O00oOo )
  if 21 - 21: I1 + i11iIiiIii + iiiii11iII1 * i11iiII % iiIIiIiIi % II111iiii
  if 55 - 55: O0o - oo0Ooo0
 elif o00o ( 'd' , '5e6a6a663025250b1c0a0506' ) in o0oO0O00oOo :
  o000O0OOoo ( o0oO0O00oOo , OoOooo )
  if 84 - 84: Ii11iii11I + O0o - I1 * I1
  if 61 - 61: OoooooooOO . oOo0 . OoooooooOO / O0o
 elif oo00OOoOoO00 == 'back' :
  try :
   shutil . rmtree ( oo00 )
  except :
   pass
  xbmc . executebuiltin ( 'reboot' )
  if 72 - 72: i1IIi
  if 82 - 82: I1 + OoooooooOO / i11iIiiIii * OooooO0oOO . OoooooooOO
def ii1 ( ) :
 print "KILL_KODI"
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  try :
   os . system ( 'killall -9 XBMC' )
  except :
   pass
  try :
   os . system ( 'killall -9 Kodi' )
  except :
   pass
 else :
  if 63 - 63: OooooO0oOO
  try :
   os . system ( 'killall XBMC' )
  except :
   pass
  try :
   os . system ( 'killall Kodi' )
  except :
   pass
  try :
   os . system ( 'killall -9 xbmc.bin' )
  except :
   pass
  try :
   os . system ( 'killall -9 kodi.bin' )
  except :
   pass
   if 6 - 6: Ii11Ii11I / OooooO0oOO
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 57 - 57: iIii1
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
  iIiiiI . ok ( 'Attempting to use advanced task killer apk' , 'If you have the advanced task killer apk installed please click the big button at the top which says "KILL selected apps". Click "OK" then "Kill selected apps. Please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
  try :
   xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
  except :
   pass
   if 67 - 67: IIIII . Ii11Ii11I
def i111I11i ( ) :
 oO00oOo0OOO = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  ii1ooO = database . connect ( oO00oOo0OOO )
  oOoOoO000OO = ii1ooO . cursor ( )
  oOoOoO000OO . execute ( "DROP TABLE IF EXISTS path" )
  oOoOoO000OO . execute ( "VACUUM" )
  ii1ooO . commit ( )
  oOoOoO000OO . execute ( "DROP TABLE IF EXISTS sizes" )
  oOoOoO000OO . execute ( "VACUUM" )
  ii1ooO . commit ( )
  oOoOoO000OO . execute ( "DROP TABLE IF EXISTS texture" )
  oOoOoO000OO . execute ( "VACUUM" )
  ii1ooO . commit ( )
  oOoOoO000OO . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  ii1ooO . commit ( )
  oOoOoO000OO . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  ii1ooO . commit ( )
  oOoOoO000OO . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  ii1ooO . commit ( )
 except :
  pass
 shutil . rmtree ( I1i1iiI1 )
 if 38 - 38: i11iiII
def III111iiIi1 ( ) :
 iiiI11 = str ( i11 [ : 2 ] )
 if iiiI11 < 14 :
  Ii11Ii = os . path . join ( i1 , 'xbmc.log' )
  if 1 - 1: iiiii11iII1 % OoooooooOO + II111iiii - III1I11iiii1I
 else :
  Ii11Ii = os . path . join ( i1 , 'kodi.log' )
  if 43 - 43: oo0Ooo0 / IIIII % IiI1I1
 iiiI111I = open ( Ii11Ii , 'r' )
 oooOOO00o0 = iiiI111I . read ( )
 iiiI111I . close ( )
 if 1 - 1: iIii1I11I1II1
 oo = re . compile ( 'Host CPU: (.+?) available' ) . findall ( oooOOO00o0 )
 i1II1I = oo [ 0 ] if ( len ( oo ) > 0 ) else ''
 return i1II1I . replace ( ' ' , '%20' )
 if 95 - 95: IIIII - oo0Ooo0 / II111iiii % OooooO0oOO . i11iiII
 if 24 - 24: i1IIi . i11iIiiIii
def IIIII1iii11 ( ) :
 iiiI11 = str ( i11 [ : 2 ] )
 if iiiI11 < 14 :
  Ii11Ii = os . path . join ( i1 , 'xbmc.log' )
  if 35 - 35: oOo0 / Ii11iii11I / II111iiii - iIii1I11I1II1 + II111iiii . Ii11iii11I
 else :
  Ii11Ii = os . path . join ( i1 , 'kodi.log' )
  if 81 - 81: iiIIiIiIi * oo0Ooo0 - OooooO0oOO * IiI1I1 % I1 * I1
 iiiI111I = open ( Ii11Ii , 'r' )
 oooOOO00o0 = iiiI111I . read ( )
 iiiI111I . close ( )
 if 59 - 59: iIii1I11I1II1
 I1ii1Ii1ii11i = re . compile ( 'Running on (.+?)\n' ) . findall ( oooOOO00o0 )
 o0o000 = I1ii1Ii1ii11i [ 0 ] if ( len ( I1ii1Ii1ii11i ) > 0 ) else ''
 return o0o000 . replace ( ' ' , '%20' )
 if 50 - 50: III1I11iiii1I % i1IIi
 if 21 - 21: OoooooooOO - iIii1I11I1II1
def OO0OoOOO0 ( protocol ) :
 if sys . platform == 'win32' :
  for ooOO00O00oo in os . popen ( "ipconfig /all" ) :
   if ooOO00O00oo . lstrip ( ) . startswith ( 'Physical Address' ) :
    O00ooOo = ooOO00O00oo . split ( ':' ) [ 1 ] . strip ( ) . replace ( '-' , ':' )
    break
    if 80 - 80: i11iiII - oo0Ooo0 + OoooooooOO
 if xbmc . getCondVisibility ( 'System.Platform.Android' ) :
  if protcol == 'wifi' :
   O0ooOoO = open ( '/sys/class/net/wlan0/address' , mode = 'r' )
  else :
   O0ooOoO = open ( '/sys/class/net/eth0/address' , mode = 'r' )
  O00ooOo = O0ooOoO . read ( )
  O00ooOo = O00ooOo [ : 17 ]
  O0ooOoO . close ( )
  if 26 - 26: I1 / O0o - i1IIi + iIii1
 else :
  if protocol == 'wifi' :
   for ooOO00O00oo in os . popen ( "/sbin/ifconfig" ) :
    if ooOO00O00oo . find ( 'wlan0' ) > - 1 :
     O00ooOo = ooOO00O00oo . split ( ) [ 4 ]
     break
  else :
   for ooOO00O00oo in os . popen ( "/sbin/ifconfig" ) :
    if ooOO00O00oo . find ( 'eth0' ) > - 1 :
     O00ooOo = ooOO00O00oo . split ( ) [ 4 ]
     break
 return str ( O00ooOo )
 if 38 - 38: OoooooooOO / OooooO0oOO . O0 / i1IIi / O0o + iIii1I11I1II1
def oOoOOoOOooOO ( heading , anounce ) :
 class ooO00O00oOO ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try :
    i111IiI1I = open ( anounce ) ; iI = i111IiI1I . read ( )
   except :
    iI = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( iI ) )
   return
 ooO00O00oOO ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  xbmc . sleep ( 500 )
  if 40 - 40: iiIIiIiIi . oOo0 + iiiii11iII1 + OooooO0oOO + Ii11iii11I
def I1iiioOO0OO0O ( ) :
 i11Ii1I1I11I = 0
 Ii1 = 0
 try :
  I1iiiiii = OO0OoOOO0 ( 'wifi' )
 except :
  I1iiiiii = 'Unknown'
 try :
  o0OO0Oo = OO0OoOOO0 ( 'eth0' )
 except :
  o0OO0Oo = 'Unknown'
 try :
  I11iiii1I = III111iiIi1 ( )
 except :
  I11iiii1I = 'Unknown'
 try :
  iiiiI1iiiIi = IIIII1iii11 ( )
 except :
  iiiiI1iiiIi = 'Unknown'
 o0oO0OoO0 = I1iiiiii + '&' + I11iiii1I + '&' + iiiiI1iiiIi + '&' + o0OO0Oo . replace ( ' ' , '%20' )
 while i11Ii1I1I11I < 3 and Ii1 == 0 :
  try :
   i11Ii1I1I11I += 1
   oOOOOOoOO = oooo00 ( o00o ( 'd' , '4a5656521c1111564e4444104f471123464610524a52215a1f0e16141e04' ) + o00o ( 'e' , o0oO0OoO0 ) )
   if 35 - 35: Ii11iii11I . I1 * i11iIiiIii
   if 44 - 44: i11iIiiIii / O0o
   if 42 - 42: OoooooooOO + O0o % II111iiii + IIIII
   if 24 - 24: iiIIiIiIi * II111iiii % iiIIiIiIi % III1I11iiii1I + OoooooooOO
   if 29 - 29: II111iiii - OoooooooOO - i11iIiiIii . i11iiII
   Ii1 = 1
  except :
   iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30076 ) )
 if Ii1 == 1 :
  return oOOOOOoOO
 else :
  I11I1 = iIiiiI . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30077 ) )
  if I11I1 == 1 :
   iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30078 ) )
   try :
    shutil . rmtree ( oo00 )
   except :
    pass
   return '595d515c110b0d1804'
  else :
   return 'back'
   if 19 - 19: II111iiii
   if 72 - 72: OoooooooOO / iiiii11iII1 + IiI1I1 / I1 * IiI1I1
def oooo00 ( url ) :
 Ii1iIi111i1i1 = urllib2 . Request ( url )
 Ii1iIi111i1i1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 i1i1i11IIi = urllib2 . urlopen ( Ii1iIi111i1i1 )
 oOOOOOoOO = i1i1i11IIi . read ( )
 i1i1i11IIi . close ( )
 return oOOOOOoOO . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 if 45 - 45: I1 . i11iiII % I1 * iiiii11iII1 % iiiii11iII1
def o00o ( mode , message ) :
 if mode == 'e' :
  import random
  oOoOo00ooOooo = 0
  Ii = ''
  while oOoOo00ooOooo < 4 :
   oOoOo00ooOooo += 1
   oOoooO00O = random . randrange ( 1 , 31 )
   I1ii1111Ii = hex ( oOoooO00O ) [ 2 : ]
   if len ( I1ii1111Ii ) == 1 :
    I1ii1111Ii = '0' + I1ii1111Ii
   Ii = Ii + I1ii1111Ii
  o0O = random . randrange ( 1 , 4 )
  if o0O == 1 : Ii = Ii + '0A'
  if o0O == 2 : Ii = Ii + '04'
  if o0O == 3 : Ii = Ii + '06'
  if o0O == 4 : Ii = Ii + '08'
  iiiI1i11Ii = Ii [ - 2 : ]
  iIiII = int ( iiiI1i11Ii , 16 )
  i1i1IIIIIIIi = Ii [ - iIiII : - ( iIiII - 2 ) ]
  oo0o0oOo = - int ( i1i1IIIIIIIi , 16 )
  if 58 - 58: i11iiII - II111iiii % oOo0 + Ii11iii11I . I1 / III1I11iiii1I
  if 8 - 8: OooooO0oOO . IIIII * iIii1 + II111iiii % i11iIiiIii
  i1i1IiIiIi1Ii = ''
  oO0ooOO = ''
  for IIi1iI1 in message :
   IIi11i1II = ord ( IIi1iI1 )
   OO0ooo0o0 = int ( IIi11i1II ) + oo0o0oOo
   oO0ooOoO = hex ( OO0ooo0o0 ) [ 2 : ]
   if len ( oO0ooOoO ) == 1 :
    oO0ooOoO = '0' + oO0ooOoO
   oO0ooOO = str ( oO0ooOO ) + str ( oO0ooOoO )
  return oO0ooOO + Ii
 else :
  iiiI1i11Ii = message [ - 2 : ]
  iIiII = int ( iiiI1i11Ii , 16 )
  i1i1IIIIIIIi = message [ - iIiII : - ( iIiII - 2 ) ]
  oo0o0oOo = int ( i1i1IIIIIIIi , 16 )
  message = message [ : - 10 ]
  ooO0000o00O = [ message [ O0Ooo : O0Ooo + 2 ] for O0Ooo in range ( 0 , len ( message ) , 2 ) ]
  oO00oOOo0Oo = [ int ( IIiIIIIii , 16 ) + oo0o0oOo for IIiIIIIii in ooO0000o00O ]
  iIiI1 = [ str ( unichr ( IIiIIIIii ) ) for IIiIIIIii in oO00oOOo0Oo ]
  Ii = '' . join ( iIiI1 )
  return Ii . encode ( 'utf-8' )
  if 14 - 14: OooooO0oOO
  if 49 - 49: oOo0 / i1IIi % IiI1I1 . iiiii11iII1
oOOoOoo0O0 = binascii . unhexlify ( '6164646f6e2e786d6c' )
i1i1ii1111i1i = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , oOOoOoo0O0 ) )
iIiI = open ( i1i1ii1111i1i , mode = 'r' )
OooO0OO = file . read ( iIiI )
file . close ( iIiI )
ii1iIIiii1 = re . compile ( '<ref>(.+?)</ref>' ) . findall ( OooO0OO )
ooOo0O0o0 = ii1iIIiii1 [ 0 ] if ( len ( ii1iIIiii1 ) > 0 ) else ''
o0oo0O = hashlib . md5 ( open ( o0OOO , 'rb' ) . read ( ) ) . hexdigest ( )
if ooOo0O0o0 != o0oo0O :
 try :
  os . remove ( o0OOO )
 except :
  pass
  if 19 - 19: Ii11iii11I + i1IIi . iiiii11iII1 - O0o
OoOO = None
if OoOO == None :
 if os . path . exists ( i1I11 ) :
  os . remove ( i1I11 )
 OooO0ooo0o ( )
 if 16 - 16: oOo0 + Ii11Ii11I / i11iiII
elif OoOO == 'quit' :
 xbmc . executebuiltin ( 'StopScript(script.openwindow)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')
