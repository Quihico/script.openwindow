import base64;exec base64.b64decode('#
#       Copyright (C) 2015
#       Json Edits and Various tweaks by OpenELEQ (OpenELEQ@gmail.com)
#       Based on original work by:
#       Lee Randall (info@totalrevolution.tv)
#
#  This software is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License
#  You can find a copy of the license in the add-on folder
if 64 - 64: i11iIiiIii
import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon , os , sys , time , xbmcvfs , datetime , zipfile , shutil , binascii , hashlib
import downloader
import extract
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
try :
 import json as simplejson
except :
 import simplejson
 if 73 - 73: II111iiii
IiII1IiiIiI1 = 'script.openwindow'
iIiiiI1IiI1I1 = xbmcaddon . Addon ( IiII1IiiIiI1 )
o0OoOoOO00 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , '' ) )
I11i = xbmcaddon . Addon ( 'script.openwindow' ) . getAddonInfo ( "path" )
O0O = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'language' ) )
Oo = 10
I1ii11iIi11i = 7
I1IiI = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , 'default.py' ) )
o0OOO = xbmcgui . Dialog ( )
iIiiiI = xbmcgui . DialogProgress ( )
Iii1ii1II11i = xbmc . getSkinDir ( )
iI111iI = 0
IiII = 0
iI1Ii11111iIi = '/storage/.restore/'
i1i1II = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home' , 'userdata' , 'Thumbnails' ) )
I1i1iiI1 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , 'packages' , '' ) )
iiIIIII1i1iI = xbmc . translatePath ( 'special://home/' )
o0oO0 = os . path . join ( iiIIIII1i1iI , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'restoregui' )
oo00 = os . path . join ( iiIIIII1i1iI , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'runwizard' )
o00 = os . path . join ( iiIIIII1i1iI , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'dltime' )
Oo0oO0ooo = xbmc . translatePath ( 'special://xbmc/' )
o0oOoO00o = xbmc . getIPAddress ( )
i1 = xbmc . translatePath ( 'special://logpath/' )
oOOoo00O0O = xbmc . translatePath ( os . path . join ( iiIIIII1i1iI , 'debug.txt' ) )
i1111 = xbmc . translatePath ( 'special://home/addons/script.openwindow/' )
i11 = xbmc . getInfoLabel ( "System.BuildVersion" )
I11 = ''
if 98 - 98: I1111 * o0o0Oo0oooo0 / I1I1i1 * oO0 / IIIi1i1I
if not os . path . exists ( i1111 ) :
 i1111 = xbmc . translatePath ( 'special://xbmc/addons/script.openwindow/' )
 if 72 - 72: iii11iiII % i11IiIiiIIIII / IiiIII111ii / iiIIi1IiIi11 . i1Ii
if os . path . exists ( o00 ) :
 I111I11 = open ( o00 , mode = 'r' )
 O0O00Ooo = float ( I111I11 . read ( ) )
 I111I11 . close ( )
 if O0O00Ooo < 2 :
  OOoooooO = 'Very low quality streams may work'
  i1iIIIiI1I = 'Expect buffering, do not try HD'
 elif O0O00Ooo < 2.5 :
  OOoooooO = 'You should be ok for SD content only'
  i1iIIIiI1I = 'SD/DVD quality should be ok, do not try HD'
 elif O0O00Ooo < 5 :
  OOoooooO = 'Some HD streams may struggle, SD will be fine'
  i1iIIIiI1I = 'Most will be fine, some Blurays may struggle'
 elif O0O00Ooo < 10 :
  OOoooooO = 'All streams including HD should stream fine'
  i1iIIIiI1I = 'Most will be fine, some Blurays may struggle'
 else :
  OOoooooO = 'All streams including HD should stream fine'
  i1iIIIiI1I = 'You can play all files with no problems'
 o0OOO . ok ( 'Speed Test - Results' , '[COLOR blue]Live Streams:[/COLOR] ' + OOoooooO , '' , '[COLOR blue]Online Video:[/COLOR] ' + i1iIIIiI1I )
 os . remove ( o00 )
 if 70 - 70: i111I1 % oOoO - iiIiIIi % iI - I1111 / i1Ii
 if 38 - 38: II111iiii % i11iIiiIii . iI - IiiIII111ii + i1Ii
def Ooooo0Oo00oO0 ( ) :
 i11 = xbmc . getInfoLabel ( "System.BuildVersion" )
 Iiii11I1i1Ii1 = float ( i11 [ : 4 ] )
 if Iiii11I1i1Ii1 < 14 :
  O00 = os . path . join ( i1 , 'xbmc.log' )
 else :
  O00 = os . path . join ( i1 , 'kodi.log' )
  if 35 - 35: IIIi1i1I + i111I1 + i111I1
 try :
  I111I11 = open ( O00 , mode = 'r' )
  I11I11i1I = I111I11 . read ( )
  I111I11 . close ( )
 except :
  try :
   I111I11 = open ( os . path . join ( iiIIIII1i1iI , 'temp' , 'kodi.log' ) , mode = 'r' )
   I11I11i1I = I111I11 . read ( )
   I111I11 . close ( )
  except :
   try :
    I111I11 = open ( os . path . join ( iiIIIII1i1iI , 'temp' , 'xbmc.log' ) , mode = 'r' )
    I11I11i1I = I111I11 . read ( )
    I111I11 . close ( )
   except : pass
   if 49 - 49: II111iiii % i111I1 * O0
 if 'OpenELEC' in I11I11i1I :
  return True
  if 89 - 89: i11IiIiiIIIII + o0o0Oo0oooo0
if Ooooo0Oo00oO0 ( ) :
 Ii1I = '/storage'
 Oo0o0 = '/storage/downloads'
 if not os . path . exists ( iI1Ii11111iIi ) :
  os . makedirs ( iI1Ii11111iIi )
else :
 Ii1I = iiIIIII1i1iI
 Oo0o0 = xbmc . translatePath ( os . path . join ( 'special://home' , '..' , 'temp_download' ) )
 if 49 - 49: i11IiIiiIIIII % i1Ii + i1IIi . I1111 % iii11iiII
I1i1iii = os . path . join ( Oo0o0 , 'target.zip' )
if not os . path . exists ( Oo0o0 ) :
 os . makedirs ( Oo0o0 )
 if 20 - 20: IIIi1i1I
 if 77 - 77: oO0 / iiIIi1IiIi11
if not os . path . exists ( I1i1iiI1 ) :
 os . makedirs ( I1i1iiI1 )
 if 98 - 98: iIii1I11I1II1 / i1IIi / i11iIiiIii / IIIi1i1I
if os . path . exists ( I1i1iii ) :
 os . remove ( I1i1iii )
 if 28 - 28: IiiIII111ii - oOoO . oOoO + oO0 - OoooooooOO + O0
 if 95 - 95: I1I1i1 % i11IiIiiIIIII . O0
def I1i1I ( cmd ) :
 oOO00oOO ( cmd )
 xbmc . executebuiltin ( cmd )
 if 75 - 75: i1IIi / OoooooooOO - O0 / oO0 . II111iiii - i1IIi
 if 71 - 71: IiiIII111ii + i1Ii * IiiIII111ii - I1I1i1 * IIIi1i1I
def oOO00oOO ( text ) :
 try :
  Oooo0Ooo000 = '%s : %s' % ( IiII1IiiIiI1 , str ( text ) )
  xbmc . log ( Oooo0Ooo000 , xbmc . LOGDEBUG )
 except :
  pass
  if 51 - 51: i11iIiiIii . I1111 + II111iiii
  if 10 - 10: iii11iiII * iI * II111iiii % i1Ii . IiiIII111ii + iiIiIIi
def IIiIi11i1 ( what , filelocation ) :
 IIIii1II1II = open ( filelocation , "w" )
 IIIii1II1II . write ( what )
 IIIii1II1II . close ( )
 if 42 - 42: i1Ii + i11IiIiiIIIII
 if 76 - 76: iiIiIIi - I1I1i1
def oOooOOo00Oo0O ( setting , value ) :
 setting = '"%s"' % setting
 if 72 - 72: i111I1 / i1IIi * o0o0Oo0oooo0 - iiIiIIi
 if isinstance ( value , list ) :
  Oo0O0O0ooO0O = ''
  for IIIIii in value :
   Oo0O0O0ooO0O += '"%s",' % str ( IIIIii )
   if 70 - 70: i1Ii / iiIIi1IiIi11 . i111I1 % o0o0Oo0oooo0
  Oo0O0O0ooO0O = Oo0O0O0ooO0O [ : - 1 ]
  Oo0O0O0ooO0O = '[%s]' % Oo0O0O0ooO0O
  value = Oo0O0O0ooO0O
  if 67 - 67: oO0 * IIIi1i1I . oOoO - I1I1i1 * IIIi1i1I
 elif not isinstance ( value , int ) :
  value = '"%s"' % value
  if 46 - 46: IiiIII111ii + oO0 . I1111 * i11IiIiiIIIII % oOoO
 Oo000o = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":%s,"value":%s}, "id":1}' % ( setting , value )
 oOO00oOO ( Oo000o )
 I11IiI1I11i1i = xbmc . executeJSONRPC ( Oo000o )
 oOO00oOO ( I11IiI1I11i1i )
 if 38 - 38: IIIi1i1I
 if 57 - 57: O0 / i11IiIiiIIIII * iiIiIIi / oO0 . II111iiii
def i11iIIIIIi1 ( setting ) :
 try :
  setting = '"%s"' % setting
  if 20 - 20: i1IIi + iii11iiII - iI
  Oo000o = '{"jsonrpc":"2.0", "method":"Settings.GetSettingValue","params":{"setting":%s}, "id":1}' % ( setting )
  oOO00oOO ( Oo000o )
  I11IiI1I11i1i = xbmc . executeJSONRPC ( Oo000o )
  oOO00oOO ( I11IiI1I11i1i )
  if 30 - 30: II111iiii - IiiIII111ii - i11iIiiIii % oO0 - II111iiii * i1Ii
  I11IiI1I11i1i = simplejson . loads ( I11IiI1I11i1i )
  if 61 - 61: i11IiIiiIIIII - iiIIi1IiIi11 % IiiIII111ii
  if I11IiI1I11i1i . has_key ( 'result' ) :
   if I11IiI1I11i1i [ 'result' ] . has_key ( 'value' ) :
    return I11IiI1I11i1i [ 'result' ] [ 'value' ]
 except :
  pass
  if 84 - 84: i11IiIiiIIIII * I1I1i1 / iiIIi1IiIi11 - O0
 return None
 if 30 - 30: iIii1I11I1II1 / iI - iiIiIIi - II111iiii % i111I1
 if 49 - 49: I1111 % iI . iI . iiIIi1IiIi11 * iI
def O0oOO0 ( language ) :
 file = xbmc . translatePath ( os . path . join ( O0O , language , 'langinfo.xml' ) )
 if 68 - 68: iiIiIIi % i1IIi . oOoO . iii11iiII
 try :
  o0 = open ( file , 'r' )
  Oo0O0O0ooO0O = o0 . read ( )
  o0 . close ( )
 except :
  return None
  if 91 - 91: iIii1I11I1II1 + iiIiIIi
 Oo0O0O0ooO0O = Oo0O0O0ooO0O . replace ( ' =' , '=' )
 Oo0O0O0ooO0O = Oo0O0O0ooO0O . replace ( '= ' , '=' )
 Oo0O0O0ooO0O = Oo0O0O0ooO0O . replace ( ' = ' , '=' )
 if 31 - 31: oOoO . oO0 . IiiIII111ii
 return Oo0O0O0ooO0O
 if 75 - 75: iiIIi1IiIi11 + I1I1i1 . oO0 . iI + o0o0Oo0oooo0 . I1I1i1
 if 96 - 96: IiiIII111ii . iI - o0o0Oo0oooo0 + iIii1I11I1II1 / oO0 * IiiIII111ii
def O0ii1ii1ii ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'languagelist.txt' ) )
 if 91 - 91: oOoO
 iiIii = [ ]
 if 79 - 79: OoooooooOO / O0
 try :
  o0 = open ( file , 'r' )
  OO0OoO0o00 = o0 . readlines ( )
  o0 . close ( )
 except :
  return iiIii
  if 53 - 53: O0 * I1I1i1 + IiiIII111ii
 for Ii in OO0OoO0o00 :
  if Ii . startswith ( '#' ) :
   continue
  oOOo0 = Ii . split ( '\t' )
  if len ( oOOo0 ) < 6 :
   continue
   if 54 - 54: O0 - oOoO % IiiIII111ii
  OOoO = oOOo0 [ 0 ]
  iII = oOOo0 [ 1 ]
  dir = oOOo0 [ 2 ]
  ii1ii11IIIiiI = oOOo0 [ 3 ]
  O00OOOoOoo0O = oOOo0 [ 4 ]
  O000OOo00oo = oOOo0 [ 5 ] . replace ( '\n' , '' )
  iiIii . append ( [ OOoO , iII , dir , ii1ii11IIIiiI , O00OOOoOoo0O ] )
  if 71 - 71: i11iIiiIii + oOoO
 iiIii = sorted ( iiIii )
 return iiIii
 if 57 - 57: i11IiIiiIIIII . iiIIi1IiIi11 . i1IIi
 if 42 - 42: iiIIi1IiIi11 + iii11iiII % O0
def i1iIIIi1i ( ) :
 file = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'skinlist.txt' ) )
 if 43 - 43: oO0 % IiiIII111ii
 iiiiiiii1 = [ ]
 if 18 - 18: IIIi1i1I % i111I1 * O0
 try :
  o0 = open ( file , 'r' )
  OO0OoO0o00 = o0 . readlines ( )
  o0 . close ( )
 except :
  return iiiiiiii1
  if 87 - 87: i11iIiiIii
 for Ii in OO0OoO0o00 :
  if Ii . startswith ( '#' ) :
   continue
  oOOo0 = Ii . split ( '\t' )
  if len ( oOOo0 ) < 4 :
   continue
   if 93 - 93: iii11iiII - I1I1i1 % i11iIiiIii . i111I1 / i111I1 - iiIiIIi
  Iii1ii1II11i = oOOo0 [ 0 ]
  IIII = oOOo0 [ 1 ]
  id = oOOo0 [ 2 ]
  iiIiI = oOOo0 [ 3 ]
  o00oooO0Oo = oOOo0 [ 4 ]
  iiiiiiii1 . append ( [ Iii1ii1II11i , IIII , id , iiIiI , o00oooO0Oo ] )
 return iiiiiiii1
 if 78 - 78: i1Ii % iiIiIIi + iii11iiII
 if 64 - 64: i11IiIiiIIIII * O0 . I1111 + II111iiii
def IIi1i ( ) :
 file = '/usr/share/zoneinfo/iso3166.tab'
 if 87 - 87: IIIi1i1I - iii11iiII + oOoO % i111I1 + I1111 - oO0
 iiIii = [ ]
 if 16 - 16: iIii1I11I1II1
 try :
  o0 = open ( file , 'r' )
  OO0OoO0o00 = o0 . readlines ( )
  o0 . close ( )
 except :
  return iiIii
  if 90 - 90: IIIi1i1I % i1IIi / I1I1i1
 for Ii in OO0OoO0o00 :
  if Ii . startswith ( '#' ) :
   continue
  oOOo0 = Ii . split ( '\t' )
  if len ( oOOo0 ) < 2 :
   continue
   if 44 - 44: o0o0Oo0oooo0 . I1I1i1 / iii11iiII + i1Ii
  o0o = oOOo0 [ 0 ]
  OOoO = oOOo0 [ 1 ] . replace ( '\n' , '' )
  iiIii . append ( [ OOoO , o0o ] )
  if 73 - 73: oOoO * iii11iiII + I1111 . iI
 iiIii = sorted ( iiIii )
 return iiIii
 if 70 - 70: iiIiIIi - o0o0Oo0oooo0 / i1Ii
 if 82 - 82: iiIIi1IiIi11 % IIIi1i1I % I1I1i1 - o0o0Oo0oooo0 + OoooooooOO
def Iiii1i1 ( theCode ) :
 file = '/usr/share/zoneinfo/zone.tab'
 if 84 - 84: I1111 . iIii1I11I1II1 % OoooooooOO + i1Ii % OoooooooOO % I1I1i1
 IIi1 = [ ]
 if 45 - 45: i111I1 / i111I1 + iiIiIIi + iI
 try :
  o0 = open ( file , 'r' )
  OO0OoO0o00 = o0 . readlines ( )
  o0 . close ( )
 except :
  return IIi1
  if 47 - 47: IIIi1i1I + iI
 for Ii in OO0OoO0o00 :
  if Ii . startswith ( '#' ) :
   continue
  oOOo0 = Ii . split ( '\t' )
  if len ( oOOo0 ) < 3 :
   continue
   if 82 - 82: II111iiii . oOoO - iIii1I11I1II1 - oOoO * II111iiii
  o0o = oOOo0 [ 0 ]
  ooO0oOOooOo0 = oOOo0 [ 1 ]
  i1I1ii11i1Iii = oOOo0 [ 2 ] . replace ( '\n' , '' )
  if 26 - 26: iiIIi1IiIi11 - iIii1I11I1II1 - I1111 / I1I1i1 . oO0 % iIii1I11I1II1
  if o0o != theCode :
   if len ( IIi1 ) > 0 :
    if 91 - 91: IIIi1i1I . iIii1I11I1II1 / i11IiIiiIIIII + i1IIi
    break
  else :
   IIi1 . append ( i1I1ii11i1Iii )
   if 42 - 42: iI . IIIi1i1I . iI - iii11iiII
 IIi1 = sorted ( IIi1 )
 return IIi1
 if 40 - 40: iI - i11iIiiIii / i1Ii
 if 35 - 35: i1Ii - I1111 % IIIi1i1I . OoooooooOO % i1Ii
def I1i1Iiiii ( ) :
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'charset.txt' ) )
 if 94 - 94: IIIi1i1I * i1Ii / o0o0Oo0oooo0 / i1Ii
 oO0O0OO0O = xbmc . getLocalizedString ( 13278 )
 if 81 - 81: i11IiIiiIIIII . IIIi1i1I % O0 / I1111 - i11IiIiiIIIII
 Ii1I1i = [ ]
 try :
  o0 = open ( file , 'r' )
  OO0OoO0o00 = o0 . readlines ( )
  o0 . close ( )
 except :
  return Ii1I1i
  if 99 - 99: i11IiIiiIIIII . i111I1 + iI % i11IiIiiIIIII . i11iIiiIii % O0
 for Ii in OO0OoO0o00 :
  Ii = Ii . replace ( '"' , '' )
  Ii = Ii . replace ( '\r' , '' )
  Ii = Ii . replace ( '\n' , '' )
  Ii = Ii . split ( ',' )
  if len ( Ii ) < 2 :
   continue
   if 78 - 78: iii11iiII + IiiIII111ii - iiIiIIi
  Ii1I1i . append ( [ Ii [ 1 ] . strip ( ) , Ii [ 0 ] . strip ( ) ] )
  if 38 - 38: IIIi1i1I - i11IiIiiIIIII + iIii1I11I1II1 / oO0 % o0o0Oo0oooo0
 Ii1I1i = sorted ( Ii1I1i )
 Ii1I1i . insert ( 0 , [ oO0O0OO0O , 'DEFAULT' ] )
 return Ii1I1i
 if 57 - 57: I1I1i1 / iI
 if 29 - 29: iIii1I11I1II1 + oO0 * I1I1i1 * IiiIII111ii . I1111 * I1111
def I111I1Iiii1i ( ) :
 import select
 oOOoo00O00o = [ ]
 if 98 - 98: IiiIII111ii + oOoO + i11IiIiiIIIII % OoooooooOO
 oooooo0O000o = 'subtitles.charset'
 oO0O0OO0O = xbmc . getLocalizedString ( 13278 )
 if 64 - 64: I1111 . IIIi1i1I - iiIiIIi / OoooooooOO
 Ii1I1i = I1i1Iiiii ( )
 if 66 - 66: i111I1 - i111I1 - i11iIiiIii . iii11iiII - IiiIII111ii
 if len ( Ii1I1i ) == 0 :
  return
  if 77 - 77: oO0 - II111iiii - iI
 for IiiiIIiIi1 , OoOOoOooooOOo in enumerate ( Ii1I1i ) :
  oOOoo00O00o . append ( [ OoOOoOooooOOo [ 0 ] , IiiiIIiIi1 ] )
  if 87 - 87: I1111
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 if 6 - 6: IiiIII111ii * IIIi1i1I + i111I1
 for OoOOoOooooOOo in Ii1I1i :
  if oOOOoo0O0oO == OoOOoOooooOOo [ 1 ] :
   oOOOoo0O0oO = OoOOoOooooOOo [ 0 ]
   break
   if 44 - 44: i1Ii % I1I1i1 + OoooooooOO - O0 - i1Ii - II111iiii
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 31380 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 62 - 62: iI
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 74 - 74: i111I1 + IIIi1i1I
 oO00O000oO0 = Ii1I1i [ O0Oo0oOOoooOOOOo ] [ 0 ]
 if 79 - 79: iiIIi1IiIi11 - OoooooooOO - i11IiIiiIIIII - iIii1I11I1II1 * IiiIII111ii
 if oO00O000oO0 == oOOOoo0O0oO :
  return
  if 4 - 4: i11iIiiIii . OoooooooOO / I1I1i1 % iiIiIIi % iiIIi1IiIi11 * O0
 OoOOoOooooOOo = Ii1I1i [ O0Oo0oOOoooOOOOo ] [ 1 ]
 if 14 - 14: IiiIII111ii / IIIi1i1I
 if OoOOoOooooOOo == oOOOoo0O0oO :
  return
  if 32 - 32: I1111 * o0o0Oo0oooo0
 oOooOOo00Oo0O ( oooooo0O000o , OoOOoOooooOOo )
 I1i1I ( 'Skin.SetBool(SubtitleCharsetSet)' )
 xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( oooooo0O000o , oO00O000oO0 ) )
 if 78 - 78: IiiIII111ii - OoooooooOO - iii11iiII / iI / II111iiii
 if 29 - 29: I1111 % I1111
def Oo0O0 ( ) :
 import select
 oOOoo00O00o = [ ]
 if 82 - 82: II111iiii % iiIIi1IiIi11 / I1I1i1 + oO0 / IIIi1i1I / iiIiIIi
 oooooo0O000o = 'locale.timezone'
 if 70 - 70: i11IiIiiIIIII
 o0o = '??'
 iiIii = IIi1i ( )
 OOoO = i11iIIIIIi1 ( 'locale.timezonecountry' )
 if 59 - 59: IIIi1i1I % i11IiIiiIIIII
 for IIIIii in iiIii :
  if OOoO . lower ( ) == IIIIii [ 0 ] . lower ( ) :
   o0o = IIIIii [ 1 ]
   break
   if 6 - 6: iIii1I11I1II1 % i11iIiiIii % iii11iiII
 o0Oo0oO0oOO00 = Iiii1i1 ( o0o )
 if 92 - 92: OoooooooOO * iiIiIIi
 if len ( o0Oo0oO0oOO00 ) == 0 :
  return
  if 100 - 100: iiIiIIi + iiIiIIi * oOoO
 for IiiiIIiIi1 , i1I1ii11i1Iii in enumerate ( o0Oo0oO0oOO00 ) :
  oOOoo00O00o . append ( [ i1I1ii11i1Iii , IiiiIIiIi1 ] )
  if 1 - 1: iI . iI / oO0 - iiIiIIi
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 if 86 - 86: iIii1I11I1II1 / oO0 . II111iiii
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 14080 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 19 - 19: iii11iiII % OoooooooOO % oOoO * IIIi1i1I % O0
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 67 - 67: I1111 . i1IIi
 i1i1iI1iiiI = oOOoo00O00o [ O0Oo0oOOoooOOOOo ] [ 0 ]
 if 51 - 51: I1111 % iiIiIIi . i11IiIiiIIIII / iIii1I11I1II1 / iiIIi1IiIi11 . i11IiIiiIIIII
 if i1i1iI1iiiI == oOOOoo0O0oO :
  return
  if 42 - 42: IIIi1i1I + i1IIi - i1Ii / oOoO
 oOooOOo00Oo0O ( oooooo0O000o , i1i1iI1iiiI )
 I1i1I ( 'Skin.SetBool(TimezoneSet)' )
 iiIiIIIiiI ( oooooo0O000o )
 if 12 - 12: O0 - IIIi1i1I
 if 81 - 81: oO0 - oO0 . i111I1
def o0OoOo00o0o ( ) :
 import select
 oOOoo00O00o = [ ]
 if 41 - 41: iI % I1I1i1 - o0o0Oo0oooo0 * iiIiIIi * o0o0Oo0oooo0
 oooooo0O000o = 'locale.timezonecountry'
 if 69 - 69: IiiIII111ii - OoooooooOO + IIIi1i1I - iiIIi1IiIi11
 iiIii = IIi1i ( )
 if 23 - 23: i11iIiiIii
 for IiiiIIiIi1 , OOoO in enumerate ( iiIii ) :
  oOOoo00O00o . append ( [ OOoO [ 0 ] , IiiiIIiIi1 ] )
  if 30 - 30: IIIi1i1I - i1IIi % II111iiii + iiIIi1IiIi11 * iIii1I11I1II1
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 if 81 - 81: oOoO % i1IIi . iIii1I11I1II1
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 14080 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 4 - 4: i11iIiiIii % I1I1i1 % i1IIi / oOoO
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 6 - 6: i111I1 / I1111 % IiiIII111ii - I1111
 i1i1iI1iiiI = oOOoo00O00o [ O0Oo0oOOoooOOOOo ] [ 0 ]
 if 31 - 31: IiiIII111ii
 if i1i1iI1iiiI == oOOOoo0O0oO :
  return
  if 23 - 23: iiIiIIi . oOoO
 oOooOOo00Oo0O ( oooooo0O000o , i1i1iI1iiiI )
 I1i1I ( 'Skin.SetBool(TimezoneCountrySet)' )
 iiIiIIIiiI ( oooooo0O000o )
 if 92 - 92: oO0 + iiIiIIi * i1Ii % I1111
 if 42 - 42: o0o0Oo0oooo0
def oo000O0OoooO ( ) :
 import select
 import re
 if 93 - 93: iiIIi1IiIi11 . II111iiii / i11IiIiiIIIII % OoooooooOO * iiIIi1IiIi11 % iii11iiII
 oOOoo00O00o = [ ]
 oooooo0O000o = 'locale.language'
 iiIii = O0ii1ii1ii ( )
 I1i11 = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'flags' ) )
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 IiIi1I1 = str ( oOOOoo0O0oO )
 IiIIi1 = "languages=\n"
 IiIIi1 += IiIi1I1
 IIiIi11i1 ( IiIIi1 , oOOoo00O0O )
 if 47 - 47: o0o0Oo0oooo0 * iii11iiII + iIii1I11I1II1 / iiIiIIi / I1I1i1 - OoooooooOO
 o00oooO0Oo = ''
 if 33 - 33: oO0 * IiiIII111ii - II111iiii
 for IIIIii in iiIii :
  try :
   OOo0o0O0O = "(" + IIIIii [ 1 ] + ")"
   OOoO = OOo0o0O0O . replace ( "_" , " " )
   o0OO0o0oOOO0O = IIIIii [ 4 ]
   iII1i11 = os . path . join ( I1i11 , '%s.png' % o0OO0o0oOOO0O )
   Ooo = IIIIii [ 0 ]
   IiIIII1i11I = Ooo . replace ( "_" , " " )
   dir = IIIIii [ 2 ]
   OOO = os . path . exists ( iII1i11 )
   o00oooO0Oo = IIIIii [ 5 ]
  except :
   pass
   if 6 - 6: OoooooooOO
  if not OOO :
   iII1i11 = iI1iIii11Ii ( dir )
   iII1i11 = os . path . join ( I1i11 , '%s.png' % iII1i11 )
  oOOoo00O00o . append ( [ IiIIII1i11I + " " + OOoO , dir , iII1i11 , o00oooO0Oo ] )
  if 8 - 8: iii11iiII * iiIiIIi . iI / i1Ii - o0o0Oo0oooo0 % O0
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 309 ) , oOOoo00O00o , oOOOoo0O0oO )
 iII = O0Oo0oOOoooOOOOo
 if 17 - 17: o0o0Oo0oooo0 * oOoO
 if iII == oOOOoo0O0oO :
  return
  if 34 - 34: iI . IIIi1i1I % O0 * i111I1 + I1111
 oOooOOo00Oo0O ( oooooo0O000o , iII )
 oOooOOo00Oo0O ( 'locale.charset' , 'DEFAULT' )
 I1i1I ( 'Skin.SetBool(LanguageSet)' )
 iiIiIIIiiI ( oooooo0O000o )
 return
 if 77 - 77: i1Ii + II111iiii . oO0 * iiIiIIi + IiiIII111ii + IiiIII111ii
 if 9 - 9: iiIIi1IiIi11 % OoooooooOO . i11IiIiiIIIII % iiIIi1IiIi11
 if 32 - 32: i11iIiiIii
 if 31 - 31: iIii1I11I1II1 / I1I1i1 / iii11iiII
def iiIiIi ( ) :
 import select
 import re
 if 39 - 39: iiIiIIi
 oOOoo00O00o = [ ]
 oooooo0O000o = 'lookandfeel.skin'
 iiiiiiii1 = i1iIIIi1i ( )
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 i1i1II = os . path . join ( Oo0oO0ooo , 'addons' )
 OoOooOoO = os . path . join ( iiIIIII1i1iI , 'addons' )
 o00oooO0Oo = ''
 iiIiI = ''
 if 43 - 43: II111iiii . i11IiIiiIIIII / iii11iiII
 for IIIIii in iiiiiiii1 :
  try :
   Iii1ii1II11i = IIIIii [ 0 ]
   IIII = IIIIii [ 1 ]
   id = IIIIii [ 2 ]
   i1iI1 = os . path . join ( i1i1II , id , 'icon.png' )
   i11ii1ii11i = os . path . join ( i1iI1 , 'icon.png' )
   iiIiI = IIIIii [ 3 ]
   o00oooO0Oo = IIIIii [ 4 ]
   OOO = os . path . exists ( i1iI1 )
  except :
   pass
  if not OOO :
   i1iI1 = os . path . join ( OoOooOoO , id , 'icon.png' )
   i11ii1ii11i = os . path . join ( i1iI1 , 'icon.png' )
  oOOoo00O00o . append ( [ Iii1ii1II11i , id , i1iI1 , o00oooO0Oo ] )
  IiIi1I1 = str ( oOOoo00O00o )
  IiIIi1 = "menu=\n"
  IiIIi1 += "menu=\n"
  IiIIi1 += IiIi1I1
  IIiIi11i1 ( IiIIi1 , oOOoo00O0O )
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 424 ) + " " + xbmc . getLocalizedString ( 166 ) , oOOoo00O00o , oOOOoo0O0oO )
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 70 - 70: i1IIi - i111I1 + o0o0Oo0oooo0
 Iii1ii1II11i = O0Oo0oOOoooOOOOo
 if 12 - 12: IIIi1i1I - iii11iiII % oO0 * iiIIi1IiIi11
 if Iii1ii1II11i == oOOOoo0O0oO :
  return
 oOooOOo00Oo0O ( oooooo0O000o , Iii1ii1II11i )
 while Iii1ii1II11i != oOOOoo0O0oO :
  xbmc . executebuiltin ( 'Action(Select)' )
  oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 I1i1I ( 'Skin.SetBool(SkinSet)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
 xbmc . executebuiltin ( 'Notification(Please Wait 10 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 9 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 8 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 7 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 6 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 5 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 4 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 3 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 2 Seconds,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'Notification(Please Wait 1 Second,And Wizard Will Continue,1100,special://skin/icon.png)' )
 xbmc . sleep ( 1000 )
 xbmc . executebuiltin ( 'RunScript(' + i1111 + 'skincontrol.py)' )
 if 44 - 44: i111I1 % i1Ii
 if 41 - 41: i1IIi - iiIIi1IiIi11 - i1Ii
 if 8 - 8: I1I1i1 + iiIiIIi - IIIi1i1I % o0o0Oo0oooo0 % IIIi1i1I * i11IiIiiIIIII
 if 9 - 9: o0o0Oo0oooo0 - i11iIiiIii - IiiIII111ii * i1Ii + iI
 if 44 - 44: II111iiii
 if 52 - 52: iii11iiII - o0o0Oo0oooo0 + iii11iiII % IIIi1i1I
 if 35 - 35: iIii1I11I1II1
def iI1iIii11Ii ( country ) :
 country = country . lower ( )
 if 42 - 42: iiIiIIi . I1111 . i1IIi + oO0 + IiiIII111ii + I1111
 if country == 'basque' : return 'bq'
 if country == 'filipino' : return 'ph'
 if country == 'haitian (haitian creole)' : return 'ht'
 if country == 'georgian' : return 'un'
 if country == 'lithuanian' : return 'lt'
 if country == 'mongolian (mongolia)' : return 'un'
 if country == 'romansh' : return 'rm'
 if country == 'sinhala' : return 'un'
 if country == 'spanish (venezuela)' : return 'un'
 if country == 'vietnamese (viet nam)' : return 'vi'
 if 31 - 31: i111I1 . IiiIII111ii - iI . OoooooooOO / OoooooooOO
 return 'un'
 if 56 - 56: I1I1i1 / i11IiIiiIIIII / i11iIiiIii + OoooooooOO - o0o0Oo0oooo0 - iiIIi1IiIi11
 if 21 - 21: O0 % oOoO . I1111 / II111iiii + oOoO
def OOOO0O00o ( ) :
 import select
 oOOoo00O00o = [ ]
 if 62 - 62: iIii1I11I1II1
 oooooo0O000o = 'subtitles.languages'
 if 12 - 12: IiiIII111ii / IIIi1i1I
 Iii1ii1II11i = xbmc . getSkinDir ( ) . lower ( )
 i1i1II = xbmc . translatePath ( os . path . join ( 'special://home/addons/' , Iii1ii1II11i , 'language' ) )
 if 42 - 42: o0o0Oo0oooo0
 try : oOOOoo0O0oO , II1IIiiIiI , i1II1I1Iii1 = os . walk ( i1i1II ) . next ( )
 except : II1IIiiIiI = [ ]
 if 30 - 30: OoooooooOO - oO0
 if len ( II1IIiiIiI ) == 0 :
  i1i1II = xbmc . translatePath ( os . path . join ( 'special://xbmc/addons/' , Iii1ii1II11i , 'language' ) )
  if 75 - 75: iIii1I11I1II1 - i1Ii . o0o0Oo0oooo0 % i11iIiiIii % iiIIi1IiIi11
  try : oOOOoo0O0oO , II1IIiiIiI , i1II1I1Iii1 = os . walk ( i1i1II ) . next ( )
  except : return
  if 55 - 55: i111I1 . II111iiii % I1I1i1 * i111I1 + iI + i1Ii
 if len ( II1IIiiIiI ) == 0 :
  return
  if 24 - 24: o0o0Oo0oooo0 - i11IiIiiIIIII % iIii1I11I1II1 . i1IIi / O0
 II1IIiiIiI = sorted ( II1IIiiIiI , key = str . lower )
 if 36 - 36: I1111 - iiIIi1IiIi11
 I1i11 = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'flags' ) )
 if 29 - 29: iI * IiiIII111ii
 import re
 for IiiiIIiIi1 , dir in enumerate ( II1IIiiIiI ) :
  OOO = False
  o0o = ''
  try :
   Oo0O0O0ooO0O = O0oOO0 ( dir )
   o0o = re . compile ( '<language locale="(.+?)">' ) . search ( Oo0O0O0ooO0O ) . group ( 1 )
   iII1i11 = os . path . join ( I1i11 , '%s.png' % o0o . lower ( ) )
   OOO = os . path . exists ( iII1i11 )
  except :
   pass
   if 10 - 10: iiIiIIi % oOoO * oOoO . iiIIi1IiIi11 / i1Ii % IiiIII111ii
  if not OOO :
   iII1i11 = iI1iIii11Ii ( dir )
   iII1i11 = os . path . join ( I1i11 , '%s.png' % iII1i11 )
   if 49 - 49: I1I1i1 / i11IiIiiIIIII + O0 * IIIi1i1I
  oOOoo00O00o . append ( [ dir , IiiiIIiIi1 , iII1i11 ] )
  if 28 - 28: iI + i11iIiiIii / iiIIi1IiIi11 % oO0 % o0o0Oo0oooo0 - O0
 list = i11iIIIIIi1 ( oooooo0O000o )
 oOOOoo0O0oO = None
 if 54 - 54: i1IIi + II111iiii
 if len ( list ) > 0 :
  oOOOoo0O0oO = list [ 0 ]
  if 83 - 83: iii11iiII - I1111 + IiiIII111ii
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 21448 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 5 - 5: i1Ii
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 46 - 46: oOoO
 iII = oOOoo00O00o [ O0Oo0oOOoooOOOOo ] [ 0 ]
 if 45 - 45: iI
 if ( iII == oOOOoo0O0oO ) and ( len ( list ) == 1 ) :
  return
  if 21 - 21: i11IiIiiIIIII . iiIiIIi . IiiIII111ii / o0o0Oo0oooo0 / iiIiIIi
 oOooOOo00Oo0O ( oooooo0O000o , [ iII ] )
 I1i1I ( 'Skin.SetBool(SubtitleDownloadSet)' )
 iiIiIIIiiI ( oooooo0O000o )
 if 17 - 17: IiiIII111ii / IiiIII111ii / iiIIi1IiIi11
 if 1 - 1: i1IIi . i11iIiiIii % IiiIII111ii
def OooO0oo ( ) :
 import select
 oOOoo00O00o = [ ]
 if 89 - 89: i1Ii
 ooOoOO0OoO00o = xbmc . getLocalizedString ( 308 )
 oO0O0OO0O = xbmc . getLocalizedString ( 309 )
 if 11 - 11: o0o0Oo0oooo0 - I1111 * II111iiii . iii11iiII . i11IiIiiIIIII
 oooooo0O000o = 'locale.subtitlelanguage'
 if 61 - 61: i111I1 % I1111 - IIIi1i1I - II111iiii % O0
 file = xbmc . translatePath ( os . path . join ( iIiiiI1IiI1I1 . getAddonInfo ( 'path' ) , 'resources' , 'subtitle.txt' ) )
 if 90 - 90: iIii1I11I1II1 + iii11iiII + iI - iiIiIIi * oOoO . iii11iiII
 I11iiiii1II = [ ]
 try :
  o0 = open ( file , 'r' )
  I11iiiii1II = o0 . readlines ( )
  o0 . close ( )
 except :
  return
  if 51 - 51: O0 % i11IiIiiIIIII - II111iiii
 I11iiiii1II = sorted ( I11iiiii1II , key = str . lower )
 if 31 - 31: i111I1 / o0o0Oo0oooo0 - i111I1 - IiiIII111ii
 oOOoo00O00o . append ( [ ooOoOO0OoO00o , 0 ] )
 oOOoo00O00o . append ( [ oO0O0OO0O , 1 ] )
 if 7 - 7: i111I1 % O0 . oO0 + I1111 - iiIIi1IiIi11
 IiiiIIiIi1 = 2
 if 75 - 75: iiIIi1IiIi11
 for O0Oo0oOOoooOOOOo in I11iiiii1II :
  exec ( O0Oo0oOOoooOOOOo )
  oOOoo00O00o . append ( [ O0Oo0oOOoooOOOOo , IiiiIIiIi1 ] )
  IiiiIIiIi1 += 1
  if 71 - 71: iI
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 if 53 - 53: OoooooooOO % i1Ii . oOoO / i11iIiiIii % i111I1
 if oOOOoo0O0oO == 'original' :
  oOOOoo0O0oO = ooOoOO0OoO00o
 elif oOOOoo0O0oO == 'default' :
  oOOOoo0O0oO = oO0O0OO0O
  if 28 - 28: iiIIi1IiIi11
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 286 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 58 - 58: oO0
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 37 - 37: o0o0Oo0oooo0 - iIii1I11I1II1 / iii11iiII
 if O0Oo0oOOoooOOOOo == 0 :
  iII = 'original'
 elif O0Oo0oOOoooOOOOo == 1 :
  iII = 'default'
 else :
  iII = oOOoo00O00o [ O0Oo0oOOoooOOOOo ] [ 0 ]
  if 73 - 73: i11iIiiIii - oOoO
 if iII == oOOOoo0O0oO :
  return
  if 25 - 25: OoooooooOO + oOoO * iii11iiII
 oOooOOo00Oo0O ( oooooo0O000o , iII )
 I1i1I ( 'Skin.SetBool(SubtitlePreferredSet)' )
 iiIiIIIiiI ( oooooo0O000o )
 if 92 - 92: I1111 + iiIIi1IiIi11 + O0 / IIIi1i1I + iiIiIIi
 if 18 - 18: iI * oO0 . i111I1 / iii11iiII / i11iIiiIii
def IIIII ( ) :
 import select
 oOOoo00O00o = [ ]
 if 78 - 78: i1Ii * i1IIi
 oooooo0O000o = 'locale.country'
 if 1 - 1: I1111 / oOoO * iI
 iII = i11iIIIIIi1 ( 'locale.language' )
 Oo0O0O0ooO0O = O0oOO0 ( iII )
 if 1 - 1: iiIIi1IiIi11 * IIIi1i1I . oO0 / O0
 if not Oo0O0O0ooO0O :
  return
  if 100 - 100: iiIiIIi . IIIi1i1I * o0o0Oo0oooo0 % O0 * O0
 import re
 if 14 - 14: iii11iiII . iI + II111iiii / i111I1 / iiIIi1IiIi11
 ooo0O = [ ]
 if 16 - 16: oO0
 Iiiiii111i1ii = re . compile ( '<region name="(.+?)"' ) . findall ( Oo0O0O0ooO0O )
 for i1i1iII1 in Iiiiii111i1ii :
  ooo0O . append ( i1i1iII1 )
  if 25 - 25: iIii1I11I1II1 % i111I1 . iI
 Iiiiii111i1ii = re . compile ( '<locale="(.+?)">' ) . findall ( Oo0O0O0ooO0O )
 for i1i1iII1 in Iiiiii111i1ii :
  ooo0O . append ( i1i1iII1 )
  if 14 - 14: i11IiIiiIIIII + iii11iiII - i111I1 / O0 . iiIiIIi
 ooo0O . sort ( )
 if 45 - 45: iiIiIIi
 for IiiiIIiIi1 , i1i1iII1 in enumerate ( ooo0O ) :
  oOOoo00O00o . append ( [ i1i1iII1 , IiiiIIiIi1 ] )
  if 83 - 83: oO0 . OoooooooOO
 if len ( oOOoo00O00o ) < 1 :
  return
  if 58 - 58: i11iIiiIii + OoooooooOO % OoooooooOO / oOoO / i11iIiiIii
 oOOOoo0O0oO = i11iIIIIIi1 ( oooooo0O000o )
 if 62 - 62: I1I1i1 / iii11iiII
 O0Oo0oOOoooOOOOo = select . select ( xbmc . getLocalizedString ( 20026 ) , oOOoo00O00o , oOOOoo0O0oO )
 if 7 - 7: OoooooooOO . oOoO
 if O0Oo0oOOoooOOOOo < 0 :
  return
  if 53 - 53: i1Ii % i1Ii * IIIi1i1I + oO0
 i1i1iII1 = oOOoo00O00o [ O0Oo0oOOoooOOOOo ] [ 0 ]
 if 92 - 92: OoooooooOO + i1IIi / i1Ii * O0
 if i1i1iII1 == oOOOoo0O0oO :
  return
  if 100 - 100: iI % iIii1I11I1II1 * II111iiii - i111I1
 oOooOOo00Oo0O ( oooooo0O000o , i1i1iII1 )
 I1i1I ( 'Skin.SetBool(RegionSet)' )
 iiIiIIIiiI ( oooooo0O000o )
 if 92 - 92: iI
 if 22 - 22: o0o0Oo0oooo0 % i111I1 * iii11iiII / IiiIII111ii % i11iIiiIii * iiIIi1IiIi11
def Oo00OoOo ( up ) :
 oooooo0O000o = 'lookandfeel.skinzoom'
 ii1ii111 = i11iIIIIIi1 ( oooooo0O000o )
 if 33 - 33: iii11iiII
 if ( up ) :
  ii1ii111 += 2
 else :
  ii1ii111 -= 2
  if 92 - 92: oOoO * o0o0Oo0oooo0 * o0o0Oo0oooo0 * I1111 . iIii1I11I1II1
 if ii1ii111 > 20 :
  ii1ii111 = - 20
  if 16 - 16: iI % OoooooooOO - IiiIII111ii * i1Ii * iii11iiII / OoooooooOO
 if ii1ii111 < - 20 :
  ii1ii111 = 20
  if 31 - 31: iiIIi1IiIi11 . iiIiIIi * iI + i11iIiiIii * i11IiIiiIIIII
 oOooOOo00Oo0O ( oooooo0O000o , ii1ii111 )
 iiIiIIIiiI ( oooooo0O000o )
 if 93 - 93: iii11iiII / iIii1I11I1II1 * i1IIi % OoooooooOO * O0 * iiIIi1IiIi11
def Ooooooo ( ) :
 iiIiIIIiiI ( 'locale.language' )
 iiIiIIIiiI ( 'locale.subtitlelanguage' )
 iiIiIIIiiI ( 'locale.country' )
 iiIiIIIiiI ( 'locale.timezonecountry' )
 iiIiIIIiiI ( 'locale.timezone' )
 iiIiIIIiiI ( 'lookandfeel.skinzoom' )
 iiIiIIIiiI ( 'subtitles.languages' )
 iiIiIIIiiI ( 'subtitles.charset' )
 if 39 - 39: oOoO * o0o0Oo0oooo0 + iIii1I11I1II1 - oOoO + IiiIII111ii
 if 69 - 69: O0
 if 85 - 85: iI / O0
 if 18 - 18: IIIi1i1I % O0 * iii11iiII
 oooooo0O000o = 'lookandfeel.skin'
 Iii1ii1II11i = i11iIIIIIi1 ( oooooo0O000o )
 if Iii1ii1II11i :
  if Iii1ii1II11i . startswith ( 'skin.' ) :
   Iii1ii1II11i = Iii1ii1II11i [ 5 : ]
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( oooooo0O000o , Iii1ii1II11i ) )
  if 62 - 62: iiIiIIi . oOoO . OoooooooOO
  if 11 - 11: IiiIII111ii / iiIIi1IiIi11
def iiIiIIIiiI ( setting ) :
 ii1ii111 = i11iIIIIIi1 ( setting )
 if 73 - 73: i1IIi / i11iIiiIii
 if isinstance ( ii1ii111 , list ) :
  ii1ii111 = str ( ii1ii111 [ 0 ] )
 else :
  ii1ii111 = str ( ii1ii111 )
  if 58 - 58: o0o0Oo0oooo0 . II111iiii + i11IiIiiIIIII - i11iIiiIii / II111iiii / O0
 if setting == 'subtitles.charset' :
  Ii1I1i = I1i1Iiiii ( )
  for OoOOoOooooOOo in Ii1I1i :
   if ii1ii111 == OoOOoOooooOOo [ 1 ] :
    xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , OoOOoOooooOOo [ 0 ] ) )
    break
  return
  if 85 - 85: oO0 + IiiIII111ii
 if setting == 'locale.timezonecountry' and len ( ii1ii111 ) == 0 :
  ii1ii111 = 'Default'
  if 10 - 10: oOoO / I1I1i1 + oO0 / i1IIi
 if ii1ii111 :
  xbmc . executebuiltin ( 'Skin.SetString(%s,%s)' % ( setting , ii1ii111 ) )
 else :
  xbmc . executebuiltin ( 'Skin.Reset(%s)' % setting )
  if 27 - 27: i1Ii
  if 67 - 67: I1111
class OO00OO0O0 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'header' ] )
  self . background = kwargs [ 'background' ]
  if 48 - 48: iiIiIIi
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'backbutton' ] )
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'nextbutton' ] )
  else :
   self . nextbutton = ''
   if 72 - 72: i111I1 * i11IiIiiIIIII % i1Ii . OoooooooOO
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 99 - 99: iIii1I11I1II1 % iI + iI + i111I1 - iiIiIIi / iiIiIIi
  if kwargs [ 'selectbutton' ] != '' :
   self . selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'selectbutton' ] )
  else :
   self . selectbutton = ''
  self . toggleup = kwargs [ 'toggleup' ]
  self . toggledown = kwargs [ 'toggledown' ]
  self . selectbuttonfunction = kwargs [ 'selectbuttonfunction' ]
  self . toggleupfunction = kwargs [ 'toggleupfunction' ]
  self . toggledownfunction = kwargs [ 'toggledownfunction' ]
  self . maintext = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'maintext' ] )
  if 7 - 7: I1111 + oO0 / oOoO
  if kwargs [ 'noconnectionbutton' ] != '' :
   self . noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'noconnectionbutton' ] )
  else :
   self . noconnectionbutton = ''
   if 79 - 79: I1I1i1 - iIii1I11I1II1 + i1Ii - iiIiIIi
  self . noconnectionfunction = kwargs [ 'noconnectionfunction' ]
  if 93 - 93: II111iiii . I1111 - o0o0Oo0oooo0 + oO0
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if 61 - 61: II111iiii
  if 15 - 15: i11iIiiIii % I1111 * iiIIi1IiIi11 / iiIiIIi
  self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button1 )
  if 90 - 90: i111I1
  if 31 - 31: IiiIII111ii + O0
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 87 - 87: iI
   if 45 - 45: I1I1i1 / OoooooooOO - i111I1 / i1Ii % oOoO
  if self . toggleup == '' :
   if self . noconnectionbutton == '' :
    self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   else :
    if o0oOoO00o != '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
    elif o0oOoO00o == '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . noconnectionbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button0 )
   self . button0 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button0 . controlUp ( self . button1 )
   if self . backbutton != '' :
    self . button0 . controlLeft ( self . button2 )
  else :
   self . toggleupbutton = xbmcgui . ControlButton ( 1000 , 480 , 35 , 35 , '' , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . toggledownbutton = xbmcgui . ControlButton ( 1000 , 500 , 35 , 35 , '' , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . toggleupbutton )
   self . addControl ( self . toggledownbutton )
   self . strToggleUp = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . strToggleDown = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . addControl ( self . strToggleUp )
   self . addControl ( self . strToggleDown )
   self . strToggleUp . setLabel ( self . toggleup )
   self . strToggleDown . setLabel ( self . toggledown )
   self . toggleupbutton . controlDown ( self . toggledownbutton )
   if self . backbutton != '' :
    self . toggleupbutton . controlLeft ( self . button2 )
    self . toggledownbutton . controlLeft ( self . button2 )
   self . toggledownbutton . controlUp ( self . toggleupbutton )
   self . toggledownbutton . controlDown ( self . button1 )
   if 83 - 83: I1111 . iIii1I11I1II1 - oOoO * i11iIiiIii
  if self . toggleup == '' :
   self . setFocus ( self . button1 )
  else :
   self . setFocus ( self . toggleupbutton )
   if 20 - 20: i1IIi * iiIiIIi + II111iiii % IIIi1i1I % i11IiIiiIIIII
  if self . backbutton != '' :
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
  if self . toggleup == '' :
   self . button1 . controlUp ( self . button0 )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . button0 )
  else :
   self . button1 . controlUp ( self . toggledownbutton )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . toggledownbutton )
    if 13 - 13: o0o0Oo0oooo0
    if 60 - 60: iii11iiII * I1111
    if 17 - 17: IiiIII111ii % o0o0Oo0oooo0 / iii11iiII . oOoO * IiiIII111ii - II111iiii
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 41 - 41: i1Ii
  if o0oOoO00o == '0' :
   self . strWarning = xbmcgui . ControlTextBox ( 830 , 300 , 300 , 200 , 'font13' , '0xFFFF0000' )
   self . addControl ( self . strWarning )
   self . strWarning . setText ( 'No internet connection.[CR]To be able to get the most out of this device and set options like this you must be connected to the web. Please insert your ethernet cable or setup your Wi-Fi.' )
   if 77 - 77: iiIiIIi
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 65 - 65: II111iiii . I1111 % i11IiIiiIIIII * I1I1i1
 def onAction ( self , action ) :
  if action == Oo and self . selectbutton == 'Register' :
   self . close ( )
   Skip_Registration ( )
   if 38 - 38: oO0 / i111I1 % o0o0Oo0oooo0
 def onControl ( self , control ) :
  if control == self . button0 :
   if o0oOoO00o != '0' or self . noconnectionbutton == '' :
    exec self . selectbuttonfunction
   else :
    exec self . noconnectionfunction
  if control == self . button1 :
   exec self . nextbuttonfunction
  if self . backbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
    if 11 - 11: i111I1 - i11IiIiiIIIII + II111iiii - iIii1I11I1II1
 def message ( self , message ) :
  o0OOO = xbmcgui . Dialog ( )
  o0OOO . ok ( " My message title" , message )
  if 7 - 7: oOoO - iiIIi1IiIi11 / II111iiii * i1Ii . i111I1 * i111I1
  if 61 - 61: iiIIi1IiIi11 % iI - I1I1i1 / o0o0Oo0oooo0
class Ii1iI111 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'header' ] )
  self . background = kwargs [ 'background' ]
  if 51 - 51: oOoO * O0 / II111iiii . i1Ii % IiiIII111ii / I1111
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'backbutton' ] )
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'nextbutton' ] )
  else :
   self . nextbutton = ''
   if 9 - 9: I1111 % I1111 % II111iiii
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 30 - 30: oOoO + iiIiIIi - oOoO . oOoO - II111iiii + O0
  if kwargs [ 'optionbutton1' ] != '' :
   self . optionbutton1 = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'optionbutton1' ] )
  else :
   self . optionbutton1 = ''
  if kwargs [ 'optionbutton2' ] != '' :
   self . optionbutton2 = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'optionbutton2' ] )
  else :
   self . optionbutton2 = ''
  if kwargs [ 'optionbutton3' ] != '' :
   self . optionbutton3 = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'optionbutton3' ] )
  else :
   self . optionbutton3 = ''
   if 86 - 86: i1IIi
  self . maintext = iIiiiI1IiI1I1 . getLocalizedString ( kwargs [ 'maintext' ] )
  self . option1function = kwargs [ 'option1function' ]
  self . option2function = kwargs [ 'option2function' ]
  self . option3function = kwargs [ 'option3function' ]
  if 41 - 41: oO0 * iiIIi1IiIi11 / oO0 % i11IiIiiIIIII
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , i1111 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if self . nextbutton != '' :
   self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button1 )
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 18 - 18: II111iiii . OoooooooOO % oO0 % i1Ii
  self . button0 = xbmcgui . ControlButton ( 910 , 400 , 225 , 35 , self . optionbutton1 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . button3 = xbmcgui . ControlButton ( 910 , 440 , 225 , 35 , self . optionbutton2 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . button4 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . optionbutton3 , font = 'font13' , alignment = 2 , focusTexture = i1111 + 'resources/images/button-focus.png' , noFocusTexture = i1111 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button0 )
  self . addControl ( self . button3 )
  self . addControl ( self . button4 )
  self . button0 . controlDown ( self . button3 )
  self . button3 . controlDown ( self . button4 )
  self . setFocus ( self . button1 )
  self . button3 . controlUp ( self . button0 )
  self . button4 . controlUp ( self . button3 )
  if self . nextbutton != '' :
   self . button0 . controlUp ( self . button1 )
   self . button3 . controlRight ( self . button1 )
   self . button4 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button4 . controlRight ( self . button1 )
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button1 . controlDown ( self . button0 )
   self . button1 . controlUp ( self . button4 )
  if self . backbutton != '' :
   self . button0 . controlLeft ( self . button2 )
   self . button3 . controlLeft ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
   self . button2 . controlUp ( self . button4 )
   self . button4 . controlLeft ( self . button2 )
   if 9 - 9: I1I1i1 - o0o0Oo0oooo0 * OoooooooOO . o0o0Oo0oooo0
   if 2 - 2: OoooooooOO % IiiIII111ii
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 63 - 63: I1111 % iIii1I11I1II1
  self . strDescription = xbmcgui . ControlTextBox ( 830 , 130 , 300 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 39 - 39: i111I1 / II111iiii / iii11iiII % I1111
 def onAction ( self , action ) :
  if action == Oo and 'Register' in self . header :
   self . close ( )
   if 89 - 89: iiIiIIi + OoooooooOO + iiIiIIi * i1IIi + iIii1I11I1II1 % iiIIi1IiIi11
 def onControl ( self , control ) :
  if control == self . button0 :
   exec self . option1function
  if self . nextbutton != '' :
   if control == self . button1 :
    exec self . nextbuttonfunction
  if self . nextbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
  if control == self . button3 :
   exec self . option2function
  if control == self . button4 :
   exec self . option3function
   if 59 - 59: IiiIII111ii + i11iIiiIii
   if 88 - 88: i11iIiiIii - iI
def O0iIi1IiII ( ) :
 I1i = OO00OO0O0 (
 header = 30003 ,
 background = 'language1.png' ,
 backbutton = '' ,
 nextbutton = 30002 ,
 backbuttonfunction = '' ,
 nextbuttonfunction = 'self.close();OoOOO("language")' ,
 selectbutton = 30004 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "oo000O0OoooO();self.close();xbmc.executebuiltin('RunScript(" + i1111 + "skincontrol.py)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30005 ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 72 - 72: iIii1I11I1II1
 if 11 - 11: II111iiii / IIIi1i1I
def IiIi1 ( ) :
 I1i = Ii1iI111 (
 header = 30006 ,
 background = 'region1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();OoOOO("region")' ,
 nextbuttonfunction = 'self.close();ii()' ,
 optionbutton1 = 30007 ,
 optionbutton2 = 30008 ,
 optionbutton3 = 30009 ,
 option1function = "IIIII()" ,
 option2function = "o0OoOo00o0o()" ,
 option3function = "Oo0O0()" ,
 maintext = 30010 ,
 )
 I1i . doModal ( )
 del I1i
 if 34 - 34: IiiIII111ii
 if 91 - 91: iIii1I11I1II1 % IIIi1i1I . iIii1I11I1II1 % i1IIi / II111iiii * oO0
def ii ( ) :
 I1i = OO00OO0O0 (
 header = 30011 ,
 background = 'resolution1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();IiIi1()' ,
 nextbuttonfunction = 'self.close();i1I1i1i1iII1()' ,
 selectbutton = 30011 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "i1II()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30012 ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 81 - 81: O0 % i1Ii
 if 5 - 5: OoooooooOO - I1I1i1 + oOoO - i111I1 . I1I1i1 / iI
def i1I1i1i1iII1 ( ) :
 I1i = OO00OO0O0 (
 header = 30013 ,
 background = 'zoom1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();ii()' ,
 nextbuttonfunction = 'self.close();O0OO0oOoO0O0O()' ,
 selectbutton = 30014 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin('ActivateWindow(screencalibration)')" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30015 ,
 noconnectionbutton = '' ,
 noconnectionfunction = ""
 )
 I1i . doModal ( )
 del I1i
 if 68 - 68: o0o0Oo0oooo0 + i11iIiiIii
 if 69 - 69: iIii1I11I1II1 * iIii1I11I1II1 * i11iIiiIii + I1111 / IiiIII111ii % i1Ii
def O0OO0oOoO0O0O ( ) :
 I1i = OO00OO0O0 (
 header = 30016 ,
 background = 'weather1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();i1I1i1i1iII1()' ,
 nextbuttonfunction = 'self.close();III1iI1iII1I()' ,
 selectbutton = 30017 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "xbmc.executebuiltin(xbmcaddon.Addon(id='weather.yahoo').openSettings(sys.argv[0]))" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30018 ,
 noconnectionbutton = 30019 ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 99 - 99: i11IiIiiIIIII
 if 16 - 16: oOoO * oO0 . iI / i1IIi . I1I1i1 - i1IIi
def I1IiIIi ( ) :
 IiOOo00 = 0
 I1i = OO00OO0O0 (
 header = 30020 ,
 background = 'skins1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();O0iIi1IiII()' ,
 nextbuttonfunction = 'self.close();IiIi1()' ,
 selectbutton = 30021 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "iiIiIi()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30022 ,
 noconnectionbutton = 30019 ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 37 - 37: i1IIi
 if 46 - 46: oO0 - iiIIi1IiIi11 - i1Ii . i1IIi
def IiI1iii11iIi1 ( ) :
 I1i = OO00OO0O0 (
 header = 30023 ,
 background = 'keywords1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();III1iI1iII1I()' ,
 nextbuttonfunction = 'self.close();oOoooO0()' ,
 selectbutton = 30024 ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "iIi1IiI()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = 30025 ,
 noconnectionbutton = 30019 ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1i . doModal ( )
 del I1i
 if 40 - 40: iiIIi1IiIi11 % I1I1i1 . iiIiIIi
 if 84 - 84: oO0 % iI - oO0 . IIIi1i1I
def III1iI1iII1I ( ) :
 I1i = Ii1iI111 (
 header = 30026 ,
 background = 'localcontent1.png' ,
 backbutton = 30001 ,
 nextbutton = 30002 ,
 backbuttonfunction = 'self.close();O0OO0oOoO0O0O()' ,
 nextbuttonfunction = 'self.close();IiI1iii11iIi1()' ,
 optionbutton1 = 30027 ,
 optionbutton2 = 30028 ,
 optionbutton3 = 30029 ,
 option1function = "oooo00o0o0o()" ,
 option2function = "OO00oo0o()" ,
 option3function = "iIIIII1iiiiII()" ,
 maintext = 30030 ,
 )
 I1i . doModal ( )
 del I1i
 if 39 - 39: i1Ii * iI / oO0 * I1I1i1 . iiIIi1IiIi11 % II111iiii
 if 71 - 71: iiIiIIi % i1IIi - II111iiii - IiiIII111ii + IiiIII111ii * iI
def OoOOO ( mode ) :
 if mode == 'language' :
  if not os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
   IiIi1 ( )
  else :
   I1IiIIi ( )
 if mode == 'region' :
  if not os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
   O0iIi1IiII ( )
  else :
   I1IiIIi ( )
   if 67 - 67: i111I1 % i111I1 / i111I1
   if 53 - 53: iIii1I11I1II1
def oooo00o0o0o ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(musicfiles,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 87 - 87: iiIIi1IiIi11 * i1IIi - i1Ii % IiiIII111ii / iiIiIIi
 if 39 - 39: I1111 * i11iIiiIii - i11IiIiiIIIII / oOoO % iiIiIIi % iiIIi1IiIi11
def OO00oo0o ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(pictures,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 18 - 18: I1I1i1 + iIii1I11I1II1 - II111iiii - I1111
 if 71 - 71: OoooooooOO
def iIIIII1iiiiII ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(video,files,return)' )
 xbmc . executebuiltin ( 'Action(PageDown)' )
 xbmc . executebuiltin ( 'Action(Select)' )
 if 54 - 54: i1IIi
 if 22 - 22: i1IIi + i1Ii
 if 54 - 54: iI % IiiIII111ii . iiIiIIi + i11IiIiiIIIII - IiiIII111ii * I1111
 if 92 - 92: IIIi1i1I + iiIiIIi / o0o0Oo0oooo0 % I1I1i1 % oOoO . OoooooooOO
 if 52 - 52: iI / i11iIiiIii - IiiIII111ii . oOoO % iIii1I11I1II1 + IIIi1i1I
 if 71 - 71: i11IiIiiIIIII % iiIIi1IiIi11 * oO0 . O0 / i1Ii . iii11iiII
 if 58 - 58: o0o0Oo0oooo0 / i11IiIiiIIIII
 if 44 - 44: IiiIII111ii
 if 54 - 54: i1Ii - iiIIi1IiIi11 - iiIiIIi . iIii1I11I1II1
 if 79 - 79: i1Ii . I1I1i1
 if 40 - 40: IIIi1i1I + o0o0Oo0oooo0 . IIIi1i1I % iI
 if 15 - 15: i1Ii * o0o0Oo0oooo0 % iii11iiII * iIii1I11I1II1 - i11iIiiIii
 if 60 - 60: I1111 * iiIiIIi % I1I1i1 + i11IiIiiIIIII
 if 52 - 52: i1IIi
 if 84 - 84: i1Ii / oOoO
 if 86 - 86: oO0 * II111iiii - O0 . oO0 % iIii1I11I1II1 / IiiIII111ii
 if 11 - 11: I1111 * i11IiIiiIIIII + iii11iiII / iii11iiII
 if 37 - 37: i11iIiiIii + i1IIi
 if 23 - 23: i111I1 + iiIIi1IiIi11 . oO0 * I1111 + iii11iiII
 if 18 - 18: oOoO * IIIi1i1I . oOoO / O0
 if 8 - 8: IIIi1i1I
II1II1 = binascii . unhexlify ( '6164646f6e2e786d6c' )
if 48 - 48: i1IIi + iiIIi1IiIi11 % oO0 / o0o0Oo0oooo0 - IIIi1i1I
if 67 - 67: i11IiIiiIIIII % IIIi1i1I . OoooooooOO + IiiIII111ii * iiIIi1IiIi11 * oO0
if 36 - 36: O0 + o0o0Oo0oooo0
if 5 - 5: o0o0Oo0oooo0 * oO0
if 46 - 46: iI
if 33 - 33: i111I1 - II111iiii * OoooooooOO - o0o0Oo0oooo0 - IiiIII111ii
if 84 - 84: iiIiIIi + o0o0Oo0oooo0 - oO0 * oO0
if 61 - 61: OoooooooOO . i11IiIiiIIIII . OoooooooOO / o0o0Oo0oooo0
if 72 - 72: i1IIi
if 82 - 82: oO0 + OoooooooOO / i11iIiiIii * iii11iiII . OoooooooOO
if 63 - 63: iii11iiII
def i1II ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(systemsettings,return)' )
 xbmc . executebuiltin ( 'Action(Right)' )
 xbmc . executebuiltin ( 'Action(Select)' )
IiiI11i1I = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , II1II1 ) )
if 80 - 80: IiiIII111ii / iiIIi1IiIi11 / oO0 + i1IIi - o0o0Oo0oooo0
if 11 - 11: IIIi1i1I * I1I1i1
def iIi1IiI ( ) :
 I11IIIiIi11 = ''
 I11iiIi1i1 = 'http://urlshortbot.com/venztech'
 i1IiiI1iIi = oOOo00O0OOOo ( iIiiiI1IiI1I1 . getLocalizedString ( 30031 ) )
 I11IIIiIi11 = I11iiIi1i1 + i1IiiI1iIi
 if not os . path . exists ( Oo0o0 ) :
  os . makedirs ( Oo0o0 )
 if i1IiiI1iIi != '' :
  try :
   iIiiiI . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30032 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30033 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
   downloader . download ( I11IIIiIi11 , I1i1iii )
   iIiiiI . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30035 ) )
   if zipfile . is_zipfile ( I1i1iii ) :
    o0OOO . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30036 ) , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30037 ) )
   else :
    if os . path . getsize ( I1i1iii ) > 100000 :
     iIiiiI . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30038 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30039 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
     os . rename ( I1i1iii , iI1Ii11111iIi + '20150815123607.tar' )
     iIiiiI . update ( 0 , "" , iIiiiI1IiI1I1 . getLocalizedString ( 30040 ) )
     iIiiiI . close ( )
     xbmc . executebuiltin ( 'reboot' )
    else : xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
  except : xbmcgui . Dialog ( ) . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30041 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30042 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30043 ) )
  if 31 - 31: iiIIi1IiIi11 % IiiIII111ii * iiIIi1IiIi11
IiI = open ( IiiI11i1I , mode = 'r' )
I11I11i1I = file . read ( IiI )
file . close ( IiI )
if 34 - 34: iiIIi1IiIi11 % iI . O0 . iIii1I11I1II1
def oOOo00O0OOOo ( searchtext ) :
 oo = ''
 i1II1I = xbmc . Keyboard ( oo , searchtext )
 i1II1I . doModal ( )
 if i1II1I . isConfirmed ( ) :
  oo = i1II1I . getText ( ) . replace ( ' ' , '%20' )
  if oo == None :
   return False
 return oo
 if 95 - 95: I1I1i1 - IiiIII111ii / II111iiii % iii11iiII . IIIi1i1I
iii1IIII1iii11I = re . compile ( '<ref>(.+?)</ref>' ) . findall ( I11I11i1I )
oo0OoOooo = iii1IIII1iii11I [ 0 ] if ( len ( iii1IIII1iii11I ) > 0 ) else ''
if 95 - 95: oOoO * iii11iiII % iI % i1Ii - i1Ii
def oOoooO0 ( ) :
 os . makedirs ( o0oO0 )
 if Iii1ii1II11i == 'skin.confluence' and os . path . exists ( os . path . join ( i1111 , 'resources' , 'skinlist.txt' ) ) :
  o0Oo0 = o0OOO . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30044 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30045 ) , yeslabel = iIiiiI1IiI1I1 . getLocalizedString ( 30046 ) , nolabel = iIiiiI1IiI1I1 . getLocalizedString ( 30047 ) )
  if o0Oo0 == 0 :
   I1IiIIi ( )
 if os . path . exists ( I1i1iii ) :
  o0OOO . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30048 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30049 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30050 ) )
  if zipfile . is_zipfile ( I1i1iii ) :
   try :
    iIiiiI . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30051 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30052 ) , ' ' , ' ' )
    extract . all ( I1i1iii , Ii1I , iIiiiI )
    iIiiiI . close ( )
    i1i1II1i11 = os . path . join ( iiIIIII1i1iI , 'newbuild' )
    if not os . path . exists ( i1i1II1i11 ) :
     os . makedirs ( i1i1II1i11 )
   except :
    o0OOO . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30053 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30054 ) )
  os . remove ( I1i1iii )
  o00o ( )
  o0OOO . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30055 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30056 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30057 ) )
  os . makedirs ( o0oO0 )
  iii11II1I ( )
  if 5 - 5: oO0 - oOoO * oOoO
IiiIi1IIII1i = hashlib . md5 ( open ( I1IiI , 'rb' ) . read ( ) ) . hexdigest ( )
if 98 - 98: IiiIII111ii + i1IIi . I1111 - II111iiii - IIIi1i1I
def iIIi1I1ii ( url ) :
 try :
  iIiiiI . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30058 ) , '' , iIiiiI1IiI1I1 . getLocalizedString ( 30034 ) )
  downloader . download ( url , I1i1iii , iIiiiI )
 except : Iiii = 'quit'
 if os . path . exists ( I1i1iii ) and zipfile . is_zipfile ( I1i1iii ) :
  try :
   iIiiiI . create ( iIiiiI1IiI1I1 . getLocalizedString ( 30059 ) , '' , '' , '' )
   extract . all ( I1i1iii , Ii1I , iIiiiI )
   iIiiiI . close ( )
  except :
   o0OOO . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30060 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30061 ) )
  os . remove ( I1i1iii )
  o00o ( )
  iii11II1I ( )
  if 44 - 44: iI . i111I1 . OoooooooOO
  if 50 - 50: IIIi1i1I * i1Ii % iii11iiII / o0o0Oo0oooo0 - O0 % i111I1
def iii11II1I ( ) :
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except : pass
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  try : os . system ( 'killall -9 XBMC' )
  except : pass
  try : os . system ( 'killall -9 Kodi' )
  except : pass
 else :
  if 48 - 48: I1111 + iii11iiII + II111iiii * i11iIiiIii
  try : os . system ( 'killall XBMC' )
  except : pass
  try : os . system ( 'killall Kodi' )
  except : pass
  try : os . system ( 'killall -9 xbmc.bin' )
  except : pass
  try : os . system ( 'killall -9 kodi.bin' )
  except : pass
  if 13 - 13: OoooooooOO * i11IiIiiIIIII - i1Ii / IiiIII111ii + iiIIi1IiIi11 + oOoO
  try : os . system ( 'killall AppleTV' )
  except : pass
  try : os . system ( 'sudo initctl stop kodi' )
  except : pass
  try : os . system ( 'sudo initctl stop xbmc' )
  except : pass
  if 39 - 39: iIii1I11I1II1 - OoooooooOO
  try : os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc' )
  except : pass
  try : os . system ( 'adb shell kill org.xbmc.kodi' )
  except : pass
  try : os . system ( 'adb shell kill org.kodi' )
  except : pass
  try : os . system ( 'adb shell kill org.xbmc.xbmc' )
  except : pass
  try : os . system ( 'adb shell kill org.xbmc' )
  except : pass
  try : os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except : pass
  try : os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except : pass
  try : os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except : pass
  try : os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except : pass
  o0OOO . ok ( 'Attempting to use advanced task killer apk' , 'If you have the advanced task killer apk installed please click the big button at the top which says "KILL selected apps". Click "OK" then "Kill selected apps. Please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
  try : xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
  except : pass
  if 81 - 81: iii11iiII - O0 * OoooooooOO
if oo0OoOooo != IiiIi1IIII1i :
 os . remove ( I1IiI )
 if 23 - 23: II111iiii / i11IiIiiIIIII
def o00o ( ) :
 iII1Iii1I11i = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  i1o0oooO = database . connect ( iII1Iii1I11i )
  ooOo = i1o0oooO . cursor ( )
  ooOo . execute ( "DROP TABLE IF EXISTS path" )
  ooOo . execute ( "VACUUM" )
  i1o0oooO . commit ( )
  ooOo . execute ( "DROP TABLE IF EXISTS sizes" )
  ooOo . execute ( "VACUUM" )
  i1o0oooO . commit ( )
  ooOo . execute ( "DROP TABLE IF EXISTS texture" )
  ooOo . execute ( "VACUUM" )
  i1o0oooO . commit ( )
  ooOo . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  i1o0oooO . commit ( )
  ooOo . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  i1o0oooO . commit ( )
  ooOo . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  i1o0oooO . commit ( )
 except :
  pass
 shutil . rmtree ( O0oo0OO0 )
 if 84 - 84: IiiIII111ii
 if 87 - 87: iI + IIIi1i1I
def i1iIIIIIIiII1 ( url ) :
 iii11 = urllib2 . Request ( url )
 iii11 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 I11IiI1I11i1i = urllib2 . urlopen ( iii11 )
 i1oO = I11IiI1I11i1i . read ( )
 I11IiI1I11i1i . close ( )
 return i1oO . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 if 30 - 30: o0o0Oo0oooo0 . I1I1i1
 if 57 - 57: iiIIi1IiIi11 . o0o0Oo0oooo0 + II111iiii
try :
 shutil . rmtree ( oo00 )
except :
 pass
 if 43 - 43: iiIiIIi % i111I1
Iiii = None
if 69 - 69: i111I1 % I1I1i1
if Iiii == None :
 O0iIi1IiII ( )
elif Iiii == 'quit' :
 try :
  xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
 except :
  pass
 os . makedirs ( o0oO0 )
 xbmc . executebuiltin ( 'StopScript(script.openwindow)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')